%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: negf_grid.pdf
%%Creator: Adobe Acrobat 10.1.2
%%For: xfong
%%CreationDate: 4/5/2014, 3:12:25 PM
%%BoundingBox: 0 0 432 179
%%HiResBoundingBox: 0 0 431.3769 178.4090
%%CropBox: 0 0 431.3769 178.4090
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1097 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 10.1.2 (Windows)"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2014-04-05T15:12:17-04:00"
   xmp:CreateDate="2014-04-05T15:09:01-04:00"
   xmp:MetadataDate="2014-04-05T15:12:17-04:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:79f8e564-b9fb-45f8-8da3-02c301c644d0"
   xmpMM:InstanceID="uuid:5c0d2822-24e2-4151-8e1d-a698ec4f05ec">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft Word - PrelimReportV1_4</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>xfong</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceRGB] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8R6[!-]:\GSpL,)$"t#!.,R`Hl2p4)$#+'!.GgdIi8<;)?>=,!.l*hK,O`C)?>I0!/;BlLDg/J
)ZYX5!/MTpM&ZMQ)utm:!/qltN>qqY)uu$>!08-#O<+Ca*WV?E!0\H(PTBgi*WVKI!1+c-Qlc<r*rq`O
!1P&1S0%a%*rqlT!1tA6THF6.+98,Y!2CY:U`]Z6+onJa!2h"@W$25@+onVe!37:DX<R_I,64kk!3[UI
YTj.Q,65"p!4*pNZm5XZ,QP7u!4O3R\0V-c,lkM&!4sNW]HmQk,lkY+!5Bl]^aB,u-NM"2!5g2b`$bW)
-ih78!66Jfa=%&1.0.L>!6ZekbUEP:.0.XC!7*+pcmf%C.KImH!7E@tdjkFJ.fe*M!7iY#f.-jR/-+?S
!88t(gFN?[/-+KX!8]:-h^nid/HF`]!9,R1j"18l/HFla!9Gg5jt6Ys/cb)f!9l*9l7W/'0*(>l!:;E>
mOnS.0ECPq!:VZBnLst60ECYu!:qoFoJ$@=0`^o%!;8/JpG)aD1'%,*!;\GNq_A0L1'%8.!<+_Rr\FQS
1B7CTzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzz!!!!!~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8R6[!-]:\GSpL,)$"t#!.,R`Hl2p4)$#+'!.GgdIi8<;)?>=,!.l*hK,O`C)?>I0!/;BlLDg/J
)ZYX5!/MTpM&ZMQ)utm:!/qltN>qqY)uu$>!08-#Nue:_*WV<D!0SB'P9'^g*WVHH!1"Z+QQH3p*rq]N
!1Fu0Ri_X#*rqiR!1k;5T-+-,+98)X!2:S9UEBQ4+985]!2^q?V]l,>+onSd!3.4CX!.PF,64hj!3ROH
Y9O%O,64tn!4!jMZQoOX,QP4t!4F-Q[j1s`,lkJ%!4jHV]-RHi,lkV)!59c[^*`oq-NLq0!5U#__C#?$
-ih16!6$>d`[Ci--ih=:!6HYiasd>6.0.R@!6lqmc7/h?.KIgF!7<7rdOG7F.fe$K!7WM!eLLXN.fe0O
!8&h&fdm-W/-+EU!8K+*h(8W`/HFZ[!8oF/i@P&h/HFf_!9>^3jXgJo/cb#d!9Ys7kUll"/cb/i!:)9<
ln8A+0*(Dn!:DN@mk=b20ECVs!:hfDnhC.90`^i#!;/&Hp+ZR@1'%&(!;J;Lq(_sH1'%2,!;nSPrA"BP
1'%;0!<4hTzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzzzzzz!!!!!~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8R6[!-]:\GSpL,)$"t#!.,R`Hl2p4)$#+'!.GgdIi8<;)?>=,!.l*hK,O`C)?>I0!/;BlLDg/J
)utd7!/VZqMAuVS)utp;!0%ruNZ8%[)uu$?!080$O<+Ca*WV?E!0\H(PTBgi*WVKI!1+c-Qlc<r*rq`O
!1P&1S0%a%*rqlT!1tA6THF6.+98,Y!2CY:U`]Z5+TS>_!2^q?V]l,>+onSd!3.4CX!.PF,64hj!3ROH
Y9O%O,64tn!4!jMZQoOX,QP4t!4F-Q[j1s`,lkJ%!4jHV]-RHi,lkV)!50]Z^*`oq-NLq0!5U#__C#?$
-ih16!6$>d`[Ci--ih=:!6HYiasd>6.0.R@!6lqmc7/h?.KIgF!7<7rdOG7F.fe$K!7WM!eLLXN.fe0O
!8&h&fdm-W/-+EU!8K+*h(8W`/HFZ[!8oF/i@P&h/HFf_!9>^3jXgJo/cb#d!9Ys7kUll"/cb/i!:)9<
ln8A+0*(Dn!:DN@mk=b20ECVs!:hfDnhC.90`^i#!;/&Hp+ZR@1'%&(!;J;Lq(_sH1'%2,!;nSPrA"BP
1'%;0!<4hTzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzzzzzz!!!!!~>
>>
/CSD add_res
/3 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8R6[!-]:\GSpL,)$"t#!.,R`Hl2p4)$#+'!.GgdIi8<;)?>=,!.l*hK,O`C)?>I0!/;BlLDg/J
)utd7!/VZqMAuVS)utp;!0%ruNZ8%[*<;-A!0A6%OWFLc*WVBF!0eN)Po]pk*WVNK!14i.R3)Et*rqcP
!1Y,2SK@j'+98#V!2(G7Tca?0+98/Z!2L_;U`f`7+onJa!2h"@W$25@+onVe!37:DX<R_I,64kk!3[UI
YTj.Q,65"p!4*pNZm5XZ,QP7u!4O3R\0V-c,lkM&!4sNW]HmQk-31b-!5Bl]^aB,u-NM"2!5g2b`$bW)
-ih78!66Jfa=%&1.0.L>!6ZekbUEP:.0.XC!7*+pcmf%C.KImH!7E@tdjkFJ.fe*M!7iY#f.-jR/-+?S
!88t(gFN?[/-+KX!8]:-h^nid/HF`]!9,R1j"18l/HFla!9Gg5jt6Ys/cb)f!9l*9l7W/'0*(>l!:;E>
mOnS.0ECPq!:VZBnLst60ECYu!:qoFoJ$@=0`^o%!;8/JpG)aD1'%,*!;\GNq_A0L1'%8.!<+_Rr\FQS
1B7CTzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzz!!!!!~>
>>
/CSD add_res
/4 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8R6[!-]:\GSpL,)$"t#!.,R`Hl2p4)$#+'!.GgdIi8<;)?>=,!.l*hK,O`C)?>I0!/;BlLDg/J
)utd7!/VZqMAuVS)utp;!0%ruNZ8%[)uu$@!0A6%OWFLc*WVBF!0eN)Po]pk*WVNK!14i.R3)Et*rqcP
!1Y,2SK@j'+98#V!2(G7Tca?0+98/Z!2Lb<V'5o:+onMb!2q(AW?M>B+onYf!3@CFXWmhK,64nl!3d[J
Yp07S,QP.r!44!O[3Pa\,QP;!!4X<T\Kq6e,lkP'!5'TX]d3Zm-NLn/!5Kr^_']6"-NM%4!5p8c`@(`+
-ih:9!6?PgaXI54.0.O?!6cklbp`Y<.KIdE!731qd4,.E.KImI!7NFue11OL.fe-N!7r_$fIR$U/-+BT
!8B%)gaiH]/HFWZ!8f@.i%4rf/HFc^!95X2j=LAn/HFlb!9Pm6k:Qbu/cb,g!9u3;lRr8)0*(Am!:DK?
mP"Y00ECSr!:_`Cnh:(70`^f"!;%uGoe?I?0`^o&!;A5KpbDjF1'%/+!;eMOr%\9N1'%;/!<+bSs"aWT
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!
!!!!~>
>>
/CSD add_res
/5 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8R6[!-]:\GSpL,)$"t#!.,R`Hl2p4)$#+'!.GgdIi8<;)?>=,!.l*hK,O`C)?>I0!/;BlLDg/J
)ZYX5!/MTpM&ZMQ)utm:!/qltN>qqY)uu$>!080$O<+Ca*WV?E!0\H(PTBgi*WVKI!1+c-Qlc<r*rq`O
!1P&1S0%a%*rqlT!1tA6THF6.+98,Y!2CY:U`]Z6+onJa!2h"@W$25@+onVe!37:DX<R_I,64kk!3[UI
YTj.Q,65"p!4*pNZm5XZ,QP7u!4O3R\0V-c,lkM&!4sNW]HmQk,lkY,!5Bl]^aB,u-NM"2!5g2b`$bW)
-ih78!66Jfa=%&1.0.L>!6ZekbUEP:.0.XC!7*+pcmf%C.KImH!7E@tdjkFJ.fe*M!7iY#f.-jR/-+?S
!88t(gFN?[/-+KX!8]:-h^nid/HF`]!9,R1j"18l/HFla!9Gg5jt6Ys/cb)f!9l*9l7W/'0*(>l!:;E>
mOnS.0ECPq!:VZBnLst60ECYu!:qoFoJ$@=0`^o%!;8/JpG)aD1'%,*!;\GNq_A0L1'%8.!<+_Rr\FQS
1B7CTzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzz!!!!!~>
>>
/CSD add_res
/6 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8S^j[@jP.TrYVqX1+h)\"]t6UTM&$Xgt71\YQC>V67D+YI^R6];DgEVm*h3Z+R$?]Vr*KWNs7;
ZbEHG^T4`VX0f[D[D8oQ_618aY.2BQ\APP]`3HnmZFe,_]Z7CmaL/b'[_Bkl^WO%$bIGC4\\cS%_p,g2
cFh*A]uA=3`mDK@dD*cN^rb'Aaje2Me\fS\`6?fOc.Bt\fZ2=ka3WJ\d+ZUhgWIt"bL>:keD8C"hTaU.
cIUq"fAY*/iR-<;db3[/g>gZ9jODrGeD009h<*;EkLSMQfAGfEhs&eOl.P"[g>V>NiTo7XleCFcguIbV
j6b[`mG6jkhW=1^k3q3in)*9si90UfkOINpn`&g(ip$'plLX'%oAo60jm;X?zzzzzzzzzzzzzzzzzzzz
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzzzzzzzzzzzzzz!!!!!~>
>>
/CSD add_res
/7 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8N'\!!#+]!'L;^4obRI!!#7a!'pSb63%!Q!!#Ce!(?kf7K<EY!!#Oi!(d.j8cSia!!#[m!)3Fn
:&k8i!!#gq!)W^r;?-\q!!#su!*'"!<WE,$!!$+$!*K:%=o\P,!!$7(!*oR)?2st4!!$C,!+>j-@K6C<
!!$O0!+c-1AcMgD!!$[4!,2E5C&e6L!!$g8!,V]9D?'ZT!!$s<!-%u=EW?)\!!%*@!-J8AFoVMd!!%6D
!-nPEH2mql!!%BH!.=hIIK0@t!!%NLzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzzzzzz!!!!!~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -178.409 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 178.409 li
431.377 178.409 li
431.377 0 li
cp
clp
false sop
/1 
[/DeviceRGB] /CSA add_res
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 51 /three put
dup 56 /eight put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 77 /M put
dup 78 /N put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 127 /quoteright put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
44 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/space <1C60D8A8C9B8707C25> |-
/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9A
E12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533
946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA0
49D36B9B13B7F6C8AA7A4A5EB0> |-
/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF
58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63
BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B54
0A016D558248DC4A3E8183F5F> |-
/comma <1C60D8A8C9B8707CDCEBD9C789FC719A6E699B9D99F66BE737EEBAFF
7111B9225F270084B7F68BC0DDECBD8A23968AE48D16B628A165111DDE7E6CD8
DD6007F82AE5C9057E54AF2D17F8AB7C9B11610F20000D2C65AB75461D35EBD1
19C9E1C1E902BC7C231A59B4A0E3A4C206C50EEA0EE1> |-
/hyphen <1C60D8A8C9B81F2C797FA61189B8881D0DB497EEC4F8> |-
/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED949
85BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375
C6ADD098717CA70F621> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/three <1C60D8A8C9B7A73D83638F79AE86E17D4CE334FAA90E146D21CDA0FE
B71815E9499D6C6A6E581E78F34038D792771470EBF894DABD777E9B4FDE68E7
E1544BCF1EFB2DCE59357B716B4D2ADF3EAC3A9FF8BD07EC79AF5536B9B74185
F8F7489AD909079119E88D2BB755D6F6AC02C01BDFADB347EC55DAC49C8BB047
661CC7AAA3BDC1DB8E01EC56137B53ED31B24F4502353853D049BB0515CA4217
D33D10484933F30AD1EAA43CFDF00AFA5462EE9B1772CE60A3392B8D9C1A3598
CF2273E36A1FF3A58B2E24B1EACE5E34650257902678998DAAFF235764CCCA14
3A> |-
/eight <1C60D8A8C9B7A73DAB2BA6B835CAFB4C9A41096F555C470FE6294A70
7AE711C017C95446B200870C2B6A47FB931BCEBEB5BBC6B53605850C75701306
FD83F9DC906687C2B3A2C9C0DB9DB68E95D3478DEA01153491C8534F5AD89998
0F04C195BFB522EDEF282420AA1F12E08397ECA941D5934294BD451B3952E622
9D3E7987DD36FC8E43559904E0205D3416EDD1402AB05184D2018B2C7B816330
FD0C2740A24C74F80E34F93317BBB1D6B8C4D916C15B7FF1D533D7762324A101
7022A27246D93B9768262BFCC673CAD6781894C98679A5889F9338F377D1995A
EDF5695FBA7A65628522691535557B2045419DD63F87D7A64B6A962B> |-
/E <1C60D8A8C9B7D8BE19945133FE501067A24BBF08B984801DD42E090C7BFC
A94BE6C4AA953A8A674F2ED3DEE261A8700CA873A3A1D3699D8129F8FA28DE52
C44FD8214EA37190B26E64C97677BF6E1856F59EF49286A31D4133D861C74CDB
92794376B13E311920B8F547FC8F105147550894C833300FA326DF7877402F2A
3FD3184C9B8E130B79DB62E2735C65FD4E7A86140D8A7D764E8F05488CC19495
58757A62743714E5384E2EF166B32CB849712A9C93B7CF04FCFE8063494A215F
A79B98816AEC20BC3F> |-
/F <1C60D8A8C9B7EF322BE6235043C5A7A6ECCDDDC390BE41D3E01CEDAA91CB
335118BB7C10CD87A1A789356A0826D033ECDD0352DC64AE55B383C11F3EB18A
6F42CD78A260CB051779A3B4D92350DD65D27B671C1609DC36FBFF44C40F44FB
014C0462CFF40EA9650CDFB895B99B69FA8BD3EB8152DF452581818551FCC774
5E9E79F62FD5E1668E4EFD8B2F33AB5D5ED30AB06AFD78EF98B1A68AA26FC8B4
D7DDC1356637FA048F199EDF19A428> |-
/G <1C60D8A8C9B6079F6D6E36005945EC7274CF8CD5EF5B42D280E6D8A4F608
6ADC4B88F4BA16F6A237691F3F760A6129A67DCE9322616B1D7BB21115511238
376B94C01432A999E95ACF02B9743B28C7A3C8109C25013AEA47EC71807E3BFE
6B26986496C6B96A2458AF130FF55F6939E40BA894719E24A717462CC4A00B11
ADE5809AB1E0B4D7805897BE50087CD64F5AEA7744526E08B0D657538988C41B
FE39A8735842D620E001E1A863F676AFB361CF4C81718CBC4A0CC5AC0D51A34A
CA7D8BBE5B5D6E8D466D858B118FBBA2161DB0F7E151EB0958EF2C5C3F> |-
/H <1C60D8A8C9B6079F62C8472A58E49E4C65298F7DBB13584B0C608B103B8F
2B0C72AF215D43C457FE4678B9114F992A1CA0DD95AD962EE67821EBE89C76AF
7B7C203022FE3C67E29F7C9AA5921E4D15A2645D93C73845A47B6C4F855F057F
BA3B47AC2707354E73F37A88912B11BC586C19F99285C7E09F7C6AE400A135AD
2578B2C1702C267512A0254A355FAF242A3E032C2D5773AA8E4D90998616B06D
E2126832E624AA95B6CEA6DE0CF980ABC5058497B243E4F1F614D2E3330AC509
CE2BF6F280235C57C7347C7DBE389D9DA8C428E4F439ED717BD43889835C90DE
66BDF27965E2CAF6D3F8A236> |-
/I <1C60D8A8C9B81F2C3A0A02564E7D4C279888DF3754179E93227DE304C0C9
64F0884ECCD4584153E47F1EA31388FE202C61849A093340FE4B9D53774AFF48
A8CAE2304CA5B92609AD38240AA6AEAF6E8AB66763220047F647E30DE8B74D2A
7DF15DDA4EFCA27B915E1B9ED43E7C12> |-
/J <1C60D8A8C9B7361F02BE73C4CFD35D33EC00415B3CA6C152F65E48AE8D6C
4B6496036675C5C8F5E597063106A19B1BA3F0EE04532306F107DAD9A65C072D
06B9FB644D70E38B84756493EFE51AD825A2D0A3C49BF5AC9839A3D4E170FA5A
71858A97C57537B2C6868525AE4970995137FD1FB1D499789D521C401B0622AB
E206084830544BAB810C8807A7CEA0D0FD4C6EE8D48ABB> |-
/M <1C60D8A8C9B59F85E8A8526E50FEB33438675EDBBD0866093A4555E3EA3A
35849B91EFFB88205281CC77395AC14DF328B50F1F179210F0307F50BFB242AA
7F76F18203303EF0BF46B76E61FB539D568EF9F434EC657F4C5CDE1BCAA90A83
BAFEB02869664DC06CC8CA4FA1E876C39F3F5371AD261F117CDAF8F6A4E96ECA
4F5088752E105CDEB8FBEB2F7F82D31A2FEB6DF3C053295A006D723DEE7CEF30
A9F16E8C6EE80DDA09053247> |-
/N <1C60D8A8C9B6079FEBDAFCF29D322161AC3F52EDD22433113CAA67ECAF0B
056592AA81FE2842CB172B65A1B8C599C7080F0FEEDF52AD2A1E3DD4CF5B5A3A
BC5E3E3936B6025ECB4BBB9A6B9E506B790F934302A34C91233D5C7DD4480C8E
57FB7AE58D5F049C8795FEC67FB4BCA555E2CC51B9B80AEAE5214780F4B92D63
E63AE746DB94B9539BA648935E38> |-
/T <1C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48F
6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD9755
6EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE58
110685510DDB32C57700D5067C975D7063A496FE85C1E5> |-
/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550D
EC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B
177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB33
3E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB
0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70
BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895
DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737
B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272E
F1EF1464C3F0D45D7CBB8749AF571E09> |-
/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8
F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9A
F110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D39992
4398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D660
3C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83
F23AED1F56FC130F21> |-
/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC5
4400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A
6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C
2999730E7919239B324086FEA852156F456647AA0692084759C352D699897179
9F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-
/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D2030
65B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A
86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857
EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB
01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104
E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A
36815EA1CE5876FAC4F83CDFE1BD4A> |-
/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEA
D3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15
F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA
0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984
A59E1CFFFD06EA629758085868D3F5F7204292> |-
/f <1C60D8A8C9B81F2C3A6EB915F5DDF05E4CD39F13547A7EF54F9D79FF3209
2BEC553783B472AF53E99B3070692992C4C512F2D79447B5EC673AA5FA8274BF
E5BA294793E06A2CD85C961166E35F08CE852DFFE5F2678D2E0B1687083D40FC
628A3BE0EDFC936C866DE25768CCC0F39E7FAD6F5686BB7C64B79625F56C5573
F9A5214AA079CAA28A8468CCF29829FD2A747DD586D41C21A37BF93A8AC8FDD9
41D5FFB6450DF53658C2420EB0E5E88807E727AED5F7> |-
/g <1C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F608
47F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7FF
4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93AE
A8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02EA7
07BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7A8
585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25BF
9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4EA4
5E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFFD7
0E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC819
1E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D30027
81921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015D0
BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD46
F1C707> |-
/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E0
27FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0
134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9
C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E
2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E
36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E9
7FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F
735A795EACD82F245D81FB43B5> |-
/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D
9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F9
8C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365
B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090
E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB
8CA3E9F85837FAC6> |-
/j <1C60D8A8C9B854D0F4318DEA6521478B60F6044DAEF7868836F24B60C01F
8FF104577FAD0FB41969E65C00875715610D5549D6DAAB08B93DAF24EF054E46
E1EB981D6A0FC2F7B50B2B8F019DF50B5D4C1637EE43AB3592EB78AD07F28FA8
A877EB087C4C23186AFA6D5DE4848D9DB07C62ED4D9CCFC2A2B7A5CC01022E8E
444FD0278013A131F952B7BFC1BE02FEBD59BAE9D43DC0183C776C5A736461C5
006E87097EAC71E078346A344332A5F08E2C05F8767AE9FA349CB7EA6E867287
459698C8B1104059B90614> |-
/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C430
4B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D
244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527
D6441CE02F5A28D63A618F> |-
/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D
24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E
9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2
556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD
574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F24910
7C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18C
E6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE9556
17323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D98
7ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFE
C679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82
B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B5179
96> |-
/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC
81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D
4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF
60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B2800261
30687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E
277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0
027198438FE663C2EACF82CEB86F7C727594> |-
/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD441
6250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF9
96A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA4367
02294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D
9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-
/p <1C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40E
B48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048
D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC6
66023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F759
04A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B84
31B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E
94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF
1C7730E7CC0F462D79552DFA> |-
/q <1C60D8A8C9B7A73DB694895DD5E49D3BBCEE95B381618ED0718BA1F35CD3
9E95BCBD1002A9F89110DE3E7AD181B368295D0F054E6A3D9A7267329EB95AB8
13B7AE1696D9C600AC6A6B00419AEBFBF715793C3A2F30373AE9BFAB97302272
E9B4EA6D0F482F853122AF239C1F65C8335B7091413102CCD1675C767B686462
E8E1B94DFF670F4F69122307C3AAC013B5112B2F564262A5E8DE4D58B097F43D
017CDAA97C6843EB833175C60735563DF7F92AF1ACD211546A7958997473A18D
23764933CEE9DC71CCD4C3E61E53DA702E> |-
/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE
6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983
E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53
A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455
AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C
360275B503E4954E912CD342> |-
/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22A
CE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A03
9A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40
BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FA
AB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593
B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B
93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-
/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448
713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43
DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B
36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-
/u <1C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58A1
99CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB958152
D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D555B
867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E16
9A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F97
520325221F3417C7781EB09765> |-
/v <1C60D8A8C9B7A73DDA3AD4E30B5CCD7D3C12F7959C83D9C808662F1D2940
3E3640D88B6D61CC1EF17C120CDCE65E70C4FE9E153F8E52BB6A45EF1A33FF33
B350E779BE70BFD66B1893DAD63FDF011F2039FF0D075853D9D0E3D26BA0EDAE
DA247A4C2489AC431F6D923096DA608667B0FA6E60F963DA8A46029578956D98
258ABD433E9E> |-
/w <1C60D8A8C9B6079F04262E67C9FB6DFF2B2A2909EEE6C74AA460646E6418
023C6B7542892CB61B617E90DA8C58C94D261B2066526778FA77F05506A363FE
5266E7C038D05568B67F867A9FF97988CC575C0A7C1F4DE18568CA203BA52391
7E8148BF72D6E4FEA4245E4F8E144E9C4F6DDF7EC6DAC323FEA1568E1A6C8D85
26507DC2E91B066C274F65DD58F049FFA3E606BF021DDA3B6174F51DB721A6C7
E1197FF1898AE92ADB1C1DD84FD7DEC1> |-
/x <1C60D8A8C9B7A73DD670F5272DD145294083C4293196A1DBA349EF195DAA
DD76F8FA5D95CD31B7A1C2B32491F1D3BDEAF32234D0995EB67A2BEF06777B5B
8AB01E1FC457D70FEE563CF2C0C851F3CC8B137B00E8CC0DDAE3A128D9A2319F
3FF89B241236A311487E7B00ABDB18C5C11783A73226CB9112660CA259881698
31DBD8D37F0570522652B666847FB24934B522403DA00EF77D9BF6494155BEAC
D6C4576905B10BBFDD62A70CAEE193F073806BE591E56E5DC8424D64A808D752
8EBE8928C7E8D537D6DCC6918CF06863B4A936B7CA4331A2F9> |-
/y <1C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5BA
F02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D574795119A
3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50B8
B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454DD
6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9DB
F9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F13518A
71BC990F312D4821883A95164BCE1683B85434AFA8> |-
/quoteright <1C60D8A8C9B81F2C3AE72BEEF3B3290151ACAD934635B53EE34
3765DC00DDA5E59E0B9551EA71A93566E41E2A57804878098AC91D378BD79AE2
3B42BDD5EBF14D1EDCFEF4659707ABCC29195DACD651C824AF4FEE36FEF9B446
59A3E254B493C479F566080A57367779B650C1A88225C3E2392> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBCVCI+TimesNewRomanPSMT /PBAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/LBCVCI+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period 2{/.notdef}rp /one /.notdef /three 4{/.notdef}rp /eight 12{/.notdef}rp 
/E /F /G /H /I /J 2{/.notdef}rp /M 
/N 5{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /j /.notdef /l 
/m /n /o /p /q /r /s /t 
/u /v /w /x /y 5{/.notdef}rp /quoteright 128{/.notdef}rp]
LBCVCI+TimesNewRomanPSMT nf
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
419.268 -177.968 mo
(18 )sh
-.731941 528.232 mo
( )sh
431.268 178.372 mo
( )sh
2.68806 203.272 mo
(Figure 3.1 Illustration of the reference axis )
[6.67319 3.3372 6.0012 6.00121 3.9971 5.32921 3 6.00121 3.00119 6.00119 3 3.99713 
3.33719 3.3372 6.00121 4.66928 3.3372 3.99712 5.32919 3.33722 3.33719 6.00119 6.00121 3 
6.00121 3.99712 3 3.3372 6.00118 5.32921 3 3.99712 5.32919 3.99713 5.32919 3.9971 
5.32922 6.00119 5.32919 5.32922 3 5.32922 6.00116 3.33722 4.66925 0 ]xsh
211.308 203.272 mo
(\(left\) and Non-Equilibrium Green\177s Function )
[3.99951 3.3396 5.3316 3.99951 3.3396 3.99951 2.9856 5.3316 6.0036 6.0036 2.98558 8.6676 
6.0036 6.0036 3.99951 7.33548 6.0036 6.0036 3.3396 3.3396 3.3396 5.94 3.99951 3.3396 
6.00363 9.2424 2.9856 8.6676 3.99951 5.3316 5.3316 6.0036 3.99951 4.67172 2.9856 6.6756 
6.0036 6.00363 5.33154 3.3396 3.3396 6.0036 6.0036 0 ]xsh
3.46807 217.072 mo
(based description of the magnetic tunnel junc)
[6.006 5.33401 4.6741 5.334 6.006 2.9904 6.006 5.334 4.67409 5.33401 4.00191 3.342 
6.00601 3.342 3.342 6.00601 6.006 2.9904 6.00601 4.00191 2.9904 3.34198 6.00601 5.33398 
2.9904 9.24239 5.34239 6.00601 6.00598 5.33401 3.34198 3.34201 5.33398 2.99042 3.34198 6.00598 
6.00601 6.00601 5.33398 3.34201 2.99042 3.34198 6.00601 6.00598 0 ]xsh
221.448 217.072 mo
(tion. The coupling betwee)
[3.33841 3.33838 6.00241 6.00241 3.00238 3 7.33432 6.0024 5.33038 3 5.33041 6.00238 
6.00241 6.00238 3.33841 3.33841 6.00238 6.00241 3 6.00241 5.33038 3.33841 8.66641 5.33038 
0 ]xsh
346.788 217.072 mo
(n lattice sites are )
[6.0108 2.94 3.3468 5.33881 3.3468 3.34677 3.3468 5.33881 5.33881 2.94 4.67889 3.3468 
3.3468 5.33878 4.67889 2.94 5.33881 4.00671 5.33881 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+TimesNewRomanPS-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 70 /F put
dup 72 /H put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 88 /X put
dup 116 /t put
def
/FontBBox {-498 -307 1333 1023} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704
AA3988900AFCFF05DD> |-
/one <1C60D8A8C9B7A73DB6A4A1045477B897A236531EE6744E986B049CB2B4
C1FE00325C8BF061D241BD30B895F448A012FA11CB58DD958F1372DACE120865
7E476E9190270F7FC72B0B9DCE2DDE5E748B644DD70718A6734618F8229BDD2E
5AE0C198797BC9647A1D37D27AAA1BAE3BFBF0B70DB4F621F7> |-
/two <1C60D8A8C9B7A73DB69C12026B750802855EAC5092BB0A5898B5D5C055
BF85280FEB4B1F3E4AFB01B0A8A29DB15451C23681417470B94B4D8D92484A39
334C366B9828F8F838BF53371C17891341B316F197C3AA30247051762DF7F17C
B7ACE84978B012AD0CA07C229C814073CD1F19CA205691988B437B6925EC8729
C2823046BA> |-
/F <1C60D8A8C9B7D8BE19D38CCF292DFC046A81C46904D6DBA45C92F5D70D3F
6EE199C42E4A4C9B3B0D87C6E3C2EDE67CD75D9ACE82154AD3064B8072C730BD
5E33CCE728F682C21B15C05744AD9C71CFA42728B71E17CDFE99F456763B119B
A3FA610548CF33938B2F236B852C1938DD05A18BA75E2CBAAEE0B3BF3055B956
ECB1A81C46282785CBAC883541E9D58F06378B9B39109988D498391B51FF826B
82A0206DB5AB25618DD21E217BBB77AE2DD83767DEE5C5D18C6FD1A87CA361B1
1F32974B> |-
/H <1C60D8A8C9B6079F621206CBD7A4702230C9D588C962A53608AEF3467A86
5FC31780250C802FFEB67D8ABC56489419F4426F212A9A6E1C90131EA202D248
A503776844440DFB82BB117BAC74429B112B6B402CEA2A8966C88AD47E231216
EFD3DC57AC931220A8A4FBBF4D438C24220F62D8F8CE97DA7460B4F69FC21DC7
4A116DA816C490066ED68CA4AAFA42020E95CE1DB0F3AACBC0475DDB4D76FDA9
BDCB60CE8A0D1C9DFA841E3522DB2C2CE5C2B899EAC26962F78BB1C50E5166CB
C8F104D35D45C66AA2BB87087C3A7F97763FAAF697D7D49F26426B3974D388AB
44C2A6210C7F34650C845B569A7E5DC642B2676DD7DE75BBCBF21C8503FD868E
446D60DC1618F0> |-
/L <1C60D8A8C9B7EF3224EF14534B63E6D00A931A7B1F7C4E6610A4A79784E8
F71472BD433C216CD1B328C08A101C8579CC9AE0010F9D02418F4B50A4EFE66E
E4D2E87131AF1885C244793CDDC56EDE20C10027D0C09B436B660E2C02C9C836
E1B96E876461A546EF6906B53572BAF0A52C9ABFFB2CC7B18C0F0BBB3E78E5FE
8ECF9B5D3A5AD6469189D35D93EC876007D67F3619CECC58933278EEFDC58B13
7E> |-
/M <1C60D8A8C9B6B41CBB3F3ACE4AA9A2105B9A8C54E72C4884F6EB2DC2877F
F9ECDA5A210EBA42FE69E4D4BCE3133E4E16910F203F91038519355EF4DD5993
728941567CD1283A765803902F638C18F1EB3CFC65EC677B84E9BB54AFE92689
F8C14F1DCAB06CC60A09BE41F927AD9C7098543B045A5F3638A12DB382B5D472
3ED4272F75352EF45091275022AA236041A6EA1211DA2DA6B799A083F887C30C
1FB38946CEBFD4B11F45DF699F00B5BE7C8876699DAE5B93A444D01D631CBAFB
E79493B1F67130DC62> |-
/O <1C60D8A8C9B6079F624615F879B62BCDC20FCC1F8B590C2F6F99F8EFDEB6
4FBF0E5C602256C9BD96EA84448FCB7733E32213A3D99BCF912E335C4806468E
161372D40A3603896F1F6F4719C82FEB5F17282C630EA44602BE3F1CCB2A307B
1AB8B4849DC7C34B3CD980E7424744544CF8C0F6111A2862158EFCD36EA6CA38
44D0F4F9E55FFB91EF9AA8A20DF605BCBF3A7579A12ED45F1964CD6950B42276
830AE2B56CF163584400258E542ADC65009A050B65FAA89986449FA3AA122A53
BAC20503A6> |-
/X <1C60D8A8C9B7D8BE191C1C0F62FA691904A44B116336C9FB6E58589A0829
BC275B144479988B8464F056F41919A825CDF4E1781F09DD498C68EC539819D8
A640E525DE57B03123DF2DFCEEBC0EDF15AD44258565A6DA9402196FE1D8A52E
B592B8BB9263BCF720D51FE9C65284F0350DBD024884B7CE65563AD80D966090
0E1DE2ED2F72236525F24DBA0F9820678CA4F00C9235473601AC5592356CED20
2910196004FDBABA340CDA328534C270345CFEA704C3A2256D5907B9F12305DF
37063F680F92DEAAE49193D310C0659C20AC533F24587F7A831373D91597008C
6EE08321F21F39C8F368E543A45B929B8DE6E8A15D0A4FFC131C4552A3E568DC
B656C3> |-
/t <1C60D8A8C9B854D0F4BEDEF58C8CF76928EC03CF9E6A69066343B65CF2F2
9CD6E545B8A00752040D324808F3F5D7377FE94463A69378800F35B93737A90E
D33397EF28DE6855D7404A61AF81C1EEF0FFED3B556E8E9BEB0451CA1D28658C
106F5916BA3D50810F2ED0B604B6D36F194AAE36158BC40E0B3FFAD76350433E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBCVCJ+TimesNewRomanPS-ItalicMT /HIBBAA+TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/LBCVCJ+TimesNewRomanPS-ItalicMT*1 
[49{/.notdef}rp /one /two 19{/.notdef}rp /F /.notdef /H 3{/.notdef}rp 
/L /M /.notdef /O 8{/.notdef}rp /X 27{/.notdef}rp /t 
139{/.notdef}rp]
LBCVCJ+TimesNewRomanPS-ItalicMT nf
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [12 0 0 -12 0 0 ]msf
8.50807 230.872 mo
(t)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
11.8682 232.372 mo
(FM)
[4.86136 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
23.3882 230.872 mo
( and )
[3 5.3304 6.00241 6.0024 0 ]xsh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [12 0 0 -12 0 0 ]msf
46.7282 230.872 mo
(t)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
50.0882 232.372 mo
(OX)
[5.75836 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
60.7082 230.872 mo
( and individual lattice sites ar)
[3 5.328 6 6 3 3.336 6 6 3.336 6 3.336 6 
6 5.328 3.336 3 3.336 5.328 3.336 3.336 3.336 5.328 5.328 3 
4.66809 3.336 3.336 5.328 4.66809 3 5.328 0 ]xsh
201.708 230.872 mo
(e described by the Hamiltonian )
[5.3316 3 6.0036 5.3316 4.67169 5.3316 3.99951 3.3396 6.0036 5.3316 6.00359 3 
6.0036 6.0036 3 3.3396 6.00357 5.3316 3 8.66763 5.3316 9.24237 3.3396 3.3396 
3.33963 6.0036 6.0036 3.3396 5.3316 6.00363 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+TimesNewRomanPS-ItalicMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (QJJAAA+TimesNewRomanPS-ItalicMT)
%%Title: (QJJAAA+TimesNewRomanPS-ItalicMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /QJJAAA+TimesNewRomanPS-ItalicMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-498 -307 1333 1023} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 2534 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704AA398
8900AFCFF05DD> |
302 <001C60D8A8C9B78E05EAE457FC25C20215349C694E66437A64E561D2729
67E5D6F8FC0580E18110BB18BF986C01F2CA0BC09F77E0AA5A36B53DF7A541B2
D42FF86F873A9DD2DBD033EEBA90C9E35013F27D6F423FF092A3B962ACF11ECB
25584CF82CD92460D97F32A6542E1A256E64E9E2E9134E664DAD9B6FE018DFAB
3FDD568BA660A8F835BA30D4C4F06337FCAFE41F9E4231A3F0DB8C25F46B222B
2A65C4FE3625D41C224F8754A8E69BA41F4E9EF855962E50F12> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /QJJAAA+TimesNewRomanPS-ItalicMT-Identity-H /Identity-H 0 [/QJJAAA+TimesNewRomanPS-ItalicMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LBCVCK+TimesNewRomanPS-ItalicMT /QJJAAA+TimesNewRomanPS-ItalicMT-Identity-H findfont ct_VMDictPut
LBCVCK+TimesNewRomanPS-ItalicMT [12 0 0 -12 0 0 ]msf
354.648 230.872 mo
(\001.)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
360.948 232.372 mo
(HL1)
[5.76077 4.43607 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
375.168 230.872 mo
(, )
[3 0 ]xsh
LBCVCK+TimesNewRomanPS-ItalicMT [12 0 0 -12 0 0 ]msf
381.168 230.872 mo
(\001.)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
387.468 232.372 mo
(HL2)
[5.76077 4.43607 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
401.688 230.872 mo
( and )
[3.00003 5.33038 6.00238 6.00244 0 ]xsh
LBCVCK+TimesNewRomanPS-ItalicMT [12 0 0 -12 0 0 ]msf
6.10819 244.672 mo
(\001.)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
12.4082 246.172 mo
(OX)
[5.75837 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
23.0282 244.672 mo
(. The complete Hamiltonian describing the MTJ is written in terms of )
[3.00841 2.99519 7.3403 6.00841 5.3364 2.99521 5.3364 6.00841 9.34439 6.00841 3.34439 5.33641 
3.34439 5.33641 2.99519 8.67241 5.3364 9.34441 3.34441 3.34439 3.34438 6.00841 5.94 3.3624 
5.33641 6.00839 2.99521 6.00839 5.3364 4.61771 5.28238 4.00433 3.34439 6.00839 3.34442 6.00836 
6.00842 2.99521 3.34439 6.00842 5.3364 2.99521 10.6177 7.32233 4.67648 2.99519 3.34436 4.67651 
2.99518 8.67242 4.00433 3.34436 3.34442 3.34436 5.33643 5.94 2.99518 3.34442 6.00842 2.99518 
3.34442 5.28241 4.00427 9.24243 4.67645 2.99524 6.00836 3.9599 0 ]xsh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [12 0 0 -12 0 0 ]msf
359.868 244.672 mo
(t)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
363.288 246.172 mo
(FM)
[4.86136 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
374.808 244.672 mo
(, )
[3 0 ]xsh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [12 0 0 -12 0 0 ]msf
380.808 244.672 mo
(t)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
384.168 246.172 mo
(OX)
[5.75836 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
394.788 244.672 mo
(, )
[3 0 ]xsh
LBCVCK+TimesNewRomanPS-ItalicMT [12 0 0 -12 0 0 ]msf
400.788 244.672 mo
(\001.)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
407.088 246.172 mo
(HL1)
[5.76074 4.4361 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
421.308 244.672 mo
(, )
[3.06 0 ]xsh
LBCVCK+TimesNewRomanPS-ItalicMT [12 0 0 -12 0 0 ]msf
183.348 258.472 mo
(\001.)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
189.648 259.972 mo
(HL2)
[5.76077 4.43607 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
203.868 258.472 mo
( and )
[3 5.33041 6.00238 6.00241 0 ]xsh
LBCVCK+TimesNewRomanPS-ItalicMT [12 0 0 -12 0 0 ]msf
227.208 258.472 mo
(\001.)sh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
233.508 259.972 mo
(OX)
[5.75836 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
244.188 258.472 mo
(. )
[3 0 ]xsh
-.731804 308.272 mo
(  )
[144 0 ]xsh
gsave
152.028 110.632 mo
248.748 110.632 li
248.748 10.3717 li
152.028 10.3717 li
cp
clp
151.908 110.752 mo
248.868 110.752 li
248.868 10.2517 li
151.908 10.2517 li
cp
/6 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[96.96 0 0 100.5 43.1764 67.6573 ]ct
snap_to_device
<<
/T 1
/W 1616 
/H 1 
/M[1616 0 0 -1 0 1 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
l2p,NqZQ<jqZcZtqZug#q[33.rXAc7q@3<3q[`N7q[r]<q@i`?q\AuDqA9#Gq\f#Eq]#DPqAoGSr?(eV
q]PbZqBGe]q]u%bqBl(eq^D:iq^VInqCMLqq_%b!qCqe$r%\7-qD8"*q_e4.q`"C3q`4L6q`F[;qE=^>
q`jpBqa(*Gqa:3JqaLBOqFCERqapZWqFg]Zqb?o^qbR)cqGI,fqc!AkqGmDnqcEDlqcNo&qc`l$oj%?!
mU#<gqdAVrqdSo%n70OMgLL+ipgN]$qdAi!mU#croN_8tqHEc!oN:ulqc<Yqs&Jnpqc!AiqGI,dqbR&`
qb?r]qb-cXqapZUqFCEPqaL?Lqa:6Ir':<KqEXpBq`aj>q`Oa;qE"L6q`+I3qDS4.q_\.*q_J%'q_7k"
q_%atqCMLoq^VFkq^D=hq^2.cq]u%`qBGe[q]PMQq]>VTqAfAOqAT5Lq\f8JqA9#Eq\AuBq@i`=q[rZ9
q[`Q6q@3<1q[<9.oEkC#rs/6&qZcHlqZQ'aklQA~>

%%EndBinary
grestore
np
grestore
gsave
326.868 110.632 mo
423.648 110.632 li
423.648 10.3717 li
326.868 10.3717 li
cp
clp
326.748 110.752 mo
423.768 110.752 li
423.768 10.2517 li
326.748 10.2517 li
cp
/6 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[97.02 0 0 100.5 218.016 67.6573 ]ct
snap_to_device
<<
/T 1
/W 1617 
/H 1 
/M[1617 0 0 -1 0 1 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
klU&NqZQ<jq?HTtqZug#q[30-rs\i7q[NB3q[`Q8q[rZ;q\/i@qA&lCq\T)Gq\f&FqA];Oq]5MSrZCnW
qB5YYq]bn^qBYqaq^2.eq^D=jqC;@mq^hUrqC_Xuq_7k$rA+C.q_S++qDJ..q`"@2q`4O7qE+R:q`Xg?
qEOjBqa('Fqa:6KqF1<O!(QiUqagQTqb$`YqFpc\qbHu`qb[/eqbm8hqc*GmqH!JpoN:unqc`l$oN_9!
mU#<gqdASqqdSr&mpjIMgLL+ipgNZ#qdAi!mU#croN_8tqc`i!oiV)mqH!Sqr`/hpqG[8hqbd2dqbR)a
qb?o\qb-fYqFUQTqa^NQqF19Lqa:3HrB^HLq`t!Bq`am?q`O^:q`=U7qDe@2q_n:.q_\1+q_J"&q_7n#
qC_[t!%n(!qCDFmq^MCjqBu.eq^)(aq]kt^qB>_YocO#Oq]5PRqA];Mq\o>LqAB)Gq\K#Cq\8o@q@`Z;
q[iW8q@<B3q[E</q[2s%qZm0,p':EumKNIjkQC#MJ,~>

%%EndBinary
grestore
np
grestore
257.508 36.9517 mo
317.988 36.9517 li
317.988 78.7117 li
257.508 78.7117 li
cp
258.468 78.2917 mo
257.988 77.8117 li
317.508 77.8117 li
317.028 78.2917 li
317.028 37.4317 li
317.508 37.9117 li
257.988 37.9117 li
258.468 37.4317 li
0 0 0 rgb
f
238.788 70.5517 mo
266.028 70.5517 li
266.028 71.1517 li
238.788 71.1517 li
cp
239.388 72.7117 mo
235.668 70.8517 li
239.388 68.9917 li
cp
265.428 68.9917 mo
269.148 70.8517 li
265.428 72.7117 li
f
272.268 44.5717 mo
299.508 44.5717 li
299.508 45.1717 li
272.268 45.1717 li
cp
272.868 46.7317 mo
269.148 44.8717 li
272.868 43.0117 li
cp
298.908 43.0117 mo
302.628 44.8717 li
298.908 46.7317 li
f
309.468 70.5517 mo
336.708 70.5517 li
336.708 71.1517 li
309.468 71.1517 li
cp
310.068 72.7117 mo
306.348 70.8517 li
310.068 68.9917 li
cp
336.108 68.9917 mo
339.828 70.8517 li
336.108 72.7117 li
f
339.228 44.5717 mo
366.528 44.5717 li
366.528 45.1717 li
339.228 45.1717 li
cp
339.828 46.7317 mo
336.108 44.8717 li
339.828 43.0117 li
cp
365.868 43.0117 mo
369.588 44.8717 li
365.868 46.7317 li
f
205.248 44.5717 mo
232.548 44.5717 li
232.548 45.1717 li
205.248 45.1717 li
cp
205.908 46.7317 mo
202.188 44.8717 li
205.908 43.0117 li
cp
231.948 43.0117 mo
235.668 44.8717 li
231.948 46.7317 li
f
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: GFNBAA+Calibri-BoldItalic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GFNBAA+Calibri-BoldItalic def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 46 /period put
dup 48 /zero put
dup 53 /five put
dup 70 /F put
dup 77 /M put
dup 79 /O put
dup 88 /X put
dup 116 /t put
def
/FontBBox {-691 -306 1265 967} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
13 dict dup begin
/.notdef <1C60D8A8C9B7A0865023AF5F70DAD9D583CB159A9399CF72C4E404
C56C5B5D43409FF7E9AD54F4D79FE1D4DC2DF0686E28547C43545F80BFE8F10D
A71A8E38ED749F235F6539F3866B4334641675CBF6ACA66A79362A2AD578B3C2
8D04DF0751112AC53AFA12807ECE594F2618F331841637F190F5A5EE4CAAFD44
FC80DC323AFDBC96DB77E1BBAAD309C0958D3DEE697CDB0AD8697717D2BFD77F
305DD4A674231C1C9F46493EFF3436B231BD323707AA4478DBD324D540D3C682
F222EBBA54D7B6A0AD113BCC7F270003536E8FA2BEA460526D3D5F37A432AE15
603240714AFC5A4DE5C70445C2C15C6F424E24E8FC6D42193A1D671D6AD46481
55761009E2A0330B8EE2930D03B444346A11EA3AACCFE84C0803BA9832498A06
E844BE53954A38FEB409EE21281E10C6FB61A07BFE316FF33839CE2B9A62F17F
884526EFF2A979C71E2A658FD9E7A4D91776CCE2400C0E25D43EA1E9CDCF675E
5D4A7C2C7C9BF955077B23AD092788FF146F6B8F5563659E34CC1F8434ED8E69
CDA41A1C5E13E80CF4217227B4CFABE3BD53566CDBC60EF6FA26D5E0A312794E
C010553A32F327D5D4AF1875C02B5B7C18E23D7523DEF3D14E361AD2EF867417
84437DB786BCB3A7FBD4231759E84B0116946B96> |-
/parenleft <1C60D8A8C9B8327E95EB29AAB012392E9D80B7E01629A50812C5
7B8AA8D88CCB3B18F1E1E41010141EA3BEA29770D75C22D6F627332311B67FF1
B690AD525AD340E5CEA6FEBB8A9FEED37891E842E94E1D4AAEA5105A0A4BD40F
2248985FA0CBB4DE8412AABC4FB03BCE0CEB443CDEF0B226482EDEEBD47E572A
ED9A5AC622D1F8B89C99C0534A7A93E6E365E218F523C6A64EB39B400CB974EA
72914528B431CE928A1BD6399CA6AD621C5F9A200D610A31504DD281E33D4212
5C93D2E2129B55AA66D3BEF5F728B30FF73BB0F542047ABF8D44964276BD0DBD
68107BCBE399A7> |-
/parenright <1C60D8A8C9B8327E0FFDB15A668BBBD9058009F3DF747681BCC
42DD02FD4EEB542CE839B802D44857F63F748408BA6C4C5E5BB834DC006E584A
D6FDEC4762D778B6304637EC36F2B59F65CD1F706F9683407BAFFBFC243100FD
BAE68D27CB9F1B840937234AB08E76128A62F4D560494A1197991678C505A010
D1531F4270571490CF8C43FCB1394080B5BC8BB9D0D79A9120C72602A07C7A68
07ED63E9537A31B946BC7FFDB45E1B6E3E39DC31C52D682E770F699511377605
35C1949885E44AEE2DB90CD83FC4C5EC2EFCD320A4747BC687E06F22DB75478E
29E0FB55476E8> |-
/asterisk <1C60D8A8C9B7A9C0DCB62FCF6216A962DEE2882329318D71A4CC7
3952EB97E0DC146082C53582290B5C291EB81474BC2FC892410AB61E22E8FBC7
A2C70BD20493E7FCE95D36E429A0105618E2B1B8DDC56C5AFD599E6D4B47C7EF
0405E8DAE14DB6E906AA969C61DB2319A6A7B64AEBA213E364A6A3783F94C34A
00DE34C71C9A8D03C25D971B3E8B58C45DC5AF1EE3D672A1E15909DE1D397D15
85DE7E1D1C043158AF9A1B10279655D2E5AD622F2E2A8C2DFE50E1E6D52D0067
5A0A83E75EFBEF56C501226FB21FCF574C490671BE2239895DCDFA050E5830F9
008338BF55DF91DF1C1ACBE76C9DFD1296D6E5D8FCFFD9E014FA7D77882A7C65
AAE705D75> |-
/plus <1C60D8A8C9B7A9C0DCA4A5D7C76ABFDFEA35AC5DFB30856B5E84E361B
B3BDBAA01D215C14226C39C38C90A0674698CC3138E0EE21D8609ACB075E1B24
62D8978C5CD850D41DEB71E238850F444908405580E2A39D61715B1EB684F2E0
DF8744D5E72002A2DA95595B359EC76B8DA26B2170C111D1BB0B86FEAA9ACF9D
791EC43CFD052FB94E16F824BE3AF8EBC581FCB17D2BECD48870D4E8700964FE
B426E35CB143FD63891B21D0A820728F1BFD8A053FB1F885093D0FC60C38D0F5
32F9BE4EFD2BD30E36BF78522EB42D6B5F838B38CC3AED46EEBE398CC8041DBF
DB1A7A1A12A40894D182FA9BFF81B7E60113FFA88AF80EF215538C3571440CAB
DD2078E9A87B10AFE83C470B7B8AA> |-
/period <1C60D8A8C9B861542ADF0FEE313A571297C926611A60B11157215BD
334ECCE35517522920350A742FF013313C5EDCFD90F7465A8C19A9C2DF3FEC63
18BFBBB9155F9C9B9FC2658553EC65C05E1C2DE5CAFD24B6189143968E729135
0A8AC65A5E2FF2D633C13DE70C6FC3997AC46AAD8DB6C0EA2B0F7174D689E82D
01952BB900EFA2D4076F68B013651356C919B67350622B5A7783687EC07267C> |-
/zero <1C60D8A8C9B7A0860AE2961B25FD0B87EA700DC00A014551B8D10620E
F27F7ECAA32C69288B15ADD811DFFC2D6ED0117B0137FA3A301942825937A28C
3203A460DB39FD0736DD20FD92C41422F0E6A57D284E6EDEE12F597ACE7AB61A
62DF56E18D5077D93CEDC9D1EBE4D28CA58527ED823DED53077943EA116A4EEA
092BA6AFE08F5C6ECA0C891580BB32F597A8C7B756645C9F87EB6AC26BEC8137
8862F1ACBE4E9DECF139BFF8AA83E6E49EAE07CD1ACBBEFA4BA0BB8B7D2427B1
B4CA7C77FC29F6DDBB71F462272AB214F88DC698387464272133D5A3BE4B3878
F82DA48DC29A199240E07AB1DCE4016EE7CA189264FB9A0746C14DF7E27F403A
5E49F83AE50AC4DEA30C6948B7D8C566A9F5E3972FCCD0FD8E195A25F6055AF2
E72C8276569B2B48E3815BC9F8A5FB9D9665003FCD278E9921D8E93B1F819041
5E261387914E011D9D1C591FAD8B895EBC7F3F7D872EB84E37C5D> |-
/five <1C60D8A8C9B7A0860A3C64889ACAD11D39662D8D7859047188E8EAD71
7ECD8E3328510D1A949CB87013F388B55FFBDBED06C0433F7594BE5AB9AEFBBF
71567C7B67BDBE817E0DF083727683512C1723AAA2DC646FC5CB5EBE35D948BD
9FA592D739F4F8286A9DC283450E7EA95AC70B127E29E41AF6EE5F286C4243F4
42288807C702120A0BF0CC648848525241AAD19773F0B508D3E9B53ECD6B64C4
447904204B9FC930BA5234589C4F26EBEE988F1FEC0C2A54C780129458359DBC
A9A398B00754A3320A06AED834D83B57A624F5C62B2E73435127B82C9C7D77E8
ECB47A395DBF29589D8DC264664CB556EC4B1D7B83B65F0EE9D4680304222777
962F66D93451E3CC3BF4EFF191677CB315F4DD1C8C6FFEDD340450A443DCC24B
4AB6F47CE891F1F84FE9CF59AAA91A11D5FD9B67237B01B4CB143859B8E08162
DD5670522084C9E8D921E09199B49E7CF703F2C52B177C725FC7985238102027
A20729DCFC6A0A3E1237F9E0C27ABDA1BF34DC8479AE926FBCCDAE326F91D> |-
/F <1C60D8A8C9B770DA425B8BDA9A09D047B274F7EF3380692CA12E1AEEFEC6
E286DD395DA7A0046C70EEE21A166AF0E86DBE70CA1CB5E4D120DA5517056D48
10B82FB13EDD44C1996BE2439D1719C5DD8535BFD7221069B843DA84CFE006A5
6924EE43922D4177433EACF3CDD5C7DE648EA34004ED9C5E09FF5BBAF22C013C
AF5B587161143955845BDB6B6A403B5811B8EC1614086DA4F5C1B2899249333F
377ED15900C196DA2E22C4D211DD2CDA7F71E60CCE6F901357E84D55B1D45927
3D8CB54B72BFA4C942EC7E249F5F7EDEB699EA0ED88541A45BB86856D572D710> |-
/M <1C60D8A8C9B69F2EDF59B2BB4150659E0C43322BF964FDF9EBCDB5157609
15859CA634AA3A6C5D5516157C9F55632BDF8A9C21A3BE5CCE87C664FF438BCA
4622D4A5DCB97A08B55D61C1D13B82687F23A675F995E1319D2B8F6F64551F3B
7A18CEE60BCB01080C787366021DFB12D2D90403160BC24CA89CD2497FCFD205
15A5F0058B91BD224999CF1B9AF3E691E91B1CA6EAE59774F47F54275753DF67
2F751D1A25E015738544F8CCEABBB966245271AAFA0B12E5382A72CE685FBE98
884EB9EECE8261C708D4DA0C0BDBD1C473E3523D60C074B72694A079B6AD4CB4
F40BF98882E7865E13B342F73E3656CE5115CF05A85C324AA801858F68FDF174
FEC5AB002628CB12EC8C9023A918C573B486E44E98994798B39B3DAA323DB709
9AE61822401E16462F0FA7AAB8A709FFB3E854F87616> |-
/O <1C60D8A8C9B651304FE4BE276C5CF1F76083704A77CE52028DC9F64AF3FF
F38801A6711F5A02CA99885B01E0347DDCB6A1A9962AD4251819126700687B3C
814BFD6FEDE788410D763A69E6FF4D92FA0B447784ABFCE3A792799DAA5D8B44
3857A8DA9D62E43A5AD3CA7EABC1F327B05897C2C5DB1E247E8A3F038F8C7F86
91C8C70D21BDF90CD3DD0CAE0182BCD920F76E92B07279D0519B268C9B4C3B4D
64768831D406400915ADC9B1F547A7043459EAF1158CB522997BFDCFFA09640F
F1A9C2C0292ECFC874C2C687AD6A20F24575DD24FD849A2E5A6506CF678BC54F
2E30A8A6DF0EFCA7F2AD76507A64DCB9B974A626D902C0B08AEE3EB64E2334E4
B5731A723274AF22CAC4C94C706AACEABC65373F9AFE1C35E9E858AC3B610F5A
376BD5179748F0C7AC1E01ADC5610D> |-
/X <1C60D8A8C9B794D334065312581320E7B3B3082A2546D257483215DBDA17
006FDA52D077539F6EB033A854BED5E99FC7DF9FF776E7E15B60F5181AD8128A
21AAB4E3010F35D8FB8D29D385EB937FB71517BF28735E8E2F04642F06EE8E31
ED07CB8C3634F4BCDE206C2BE9607B0A2799C61170DFA231EFE892069FF2CD59
234A4C72568BAA6FC6B6548851ABBCAFFFA67FF1EBAA06C803002A2A1385F11E
5F6D7A1668C46FC2406BFDE448CE514B486977131EFC0B8FC8E89B36097A8B95
84B4FE766FDFB8C21EA83A958F7CECFD5A406473AD510D39C7056B68F88EEEE9
F25B6F42383BC7AFDAC133D6D773662D8F2A3AE25801374FC84DB5EBC4D9759B
A7BEDA6671A3CD575376401C655FF108> |-
/t <1C60D8A8C9B811DA5D6D27E34C79B15FB98C0FE91BEFD73D08A35A65EEEE
C035EC210EB74465E2858204A38C61E11528D0E965A6646C9F8D0F1143F151EF
7B2DD82E5885A6CD9B228586FACFC0283D5BFE067CB6853160FEF190CEB8026D
29BDF85A492B5F62A9117F218ADDC63ECB911ECE0DF7992330F2E197DBDB7188
DC92B0ADF2CE417A9AD63319096A34528E9E143C93DD0815DB6041E8F593A376
1F2C390FDCED5F45E09097E9DFD346FD506A4EB0EC5D74F27FB1A590C51AA0C2
48776BB10C833A53596ED1B84D91B578A28F7F35C409022F46FD87E112DB9B1B
2DF1B2230A56F7E346E1038E0870B23CE04CF2CC247E1B0D9962B8276D5A8C17
A8A033DFDA5334C6504E36D99BC3E65BB674EC9E7F013914AF14F024DBC6945D
C014C49E97BCCDB9475DD162D477879C2D7BFE4352C64CDA8C4F9CAE06427AF0
4048B541850D51E2422449F424A30C0245ECB1BC02960B00CD3379D79E05DE03
EC137B3974930B89A9D831784EA0722102B4BB596E4D3F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBCVCL+Calibri-BoldItalic /GFNBAA+Calibri-BoldItalic findfont ct_VMDictPut
/LBCVCL+Calibri-BoldItalic*1 
[40{/.notdef}rp /parenleft /parenright /asterisk /plus 2{/.notdef}rp /period /.notdef 
/zero 4{/.notdef}rp /five 16{/.notdef}rp /F 6{/.notdef}rp /M /.notdef 
/O 8{/.notdef}rp /X 27{/.notdef}rp /t 139{/.notdef}rp]
LBCVCL+Calibri-BoldItalic nf
LBCVCL+Calibri-BoldItalic*1 [14.8828 0 0 -14.849 0 0 ]msf
210.348 38.7516 mo
(t)sh
LBCVCL+Calibri-BoldItalic*1 [9.9342 0 0 -9.9117 0 0 ]msf
215.568 42.4117 mo
(FM)
[4.55978 0 ]xsh
LBCVCL+Calibri-BoldItalic*1 [14.8828 0 0 -14.849 0 0 ]msf
344.328 38.7516 mo
(t)sh
LBCVCL+Calibri-BoldItalic*1 [9.9342 0 0 -9.9117 0 0 ]msf
349.488 42.4117 mo
(FM)
[4.55978 0 ]xsh
LBCVCL+Calibri-BoldItalic*1 [14.8828 0 0 -14.849 0 0 ]msf
277.308 31.3116 mo
(t)sh
LBCVCL+Calibri-BoldItalic*1 [9.9342 0 0 -9.9117 0 0 ]msf
282.528 34.9717 mo
(OX)
[6.29529 0 ]xsh
LBCVCL+Calibri-BoldItalic*1 [12.3898 0 0 -12.3619 0 0 ]msf
251.268 106.192 mo
(0.5*\(t)
[6.30272 3.32913 6.30273 6.19119 3.88663 0 ]xsh
LBCVCL+Calibri-BoldItalic*1 [8.2598 0 0 -8.2413 0 0 ]msf
281.508 109.252 mo
(FM)
[3.77969 0 ]xsh
LBCVCL+Calibri-BoldItalic*1 [12.3898 0 0 -12.3619 0 0 ]msf
292.488 106.192 mo
(+)sh
%ADOBeginSubsetFont: HJCBAA+Calibri-BoldItalic-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HJCBAA+Calibri-BoldItalic)
%%Title: (HJCBAA+Calibri-BoldItalic Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HJCBAA+Calibri-BoldItalic def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-691 -306 1265 967} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3948 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7A0865023AF5F70DAD9D583CB159A9399CF72C4E404C56C5
B5D43409FF7E9AD54F4D79FE1D4DC2DF0686E28547C43545F80BFE8F10DA71A8
E38ED749F235F6539F3866B4334641675CBF6ACA66A79362A2AD578B3C28D04D
F0751112AC53AFA12807ECE594F2618F331841637F190F5A5EE4CAAFD44FC80D
C323AFDBC96DB77E1BBAAD309C0958D3DEE697CDB0AD8697717D2BFD77F305DD
4A674231C1C9F46493EFF3436B231BD323707AA4478DBD324D540D3C682F222E
BBA54D7B6A0AD113BCC7F270003536E8FA2BEA460526D3D5F37A432AE1560324
0714AFC5A4DE5C70445C2C15C6F424E24E8FC6D42193A1D671D6AD4648155761
009E2A0330B8EE2930D03B444346A11EA3AACCFE84C0803BA9832498A06E844B
E53954A38FEB409EE21281E10C6FB61A07BFE316FF33839CE2B9A62F17F88452
6EFF2A979C71E2A658FD9E7A4D91776CCE2400C0E25D43EA1E9CDCF675E5D4A7
C2C7C9BF955077B23AD092788FF146F6B8F5563659E34CC1F8434ED8E69CDA41
A1C5E13E80CF4217227B4CFABE3BD53566CDBC60EF6FA26D5E0A312794EC0105
53A32F327D5D4AF1875C02B5B7C18E23D7523DEF3D14E361AD2EF86741784437
DB786BCB3A7FBD4231759E84B0116946B96> |
3 <001C60D8A8C9B888C146> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HJCBAA+Calibri-BoldItalic-Identity-H /Identity-H 0 [/HJCBAA+Calibri-BoldItalic] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LBCVCM+Calibri-BoldItalic /HJCBAA+Calibri-BoldItalic-Identity-H findfont ct_VMDictPut
LBCVCM+Calibri-BoldItalic [12.3898 0 0 -12.3619 0 0 ]msf
298.668 106.192 mo
(\000\003)sh
LBCVCL+Calibri-BoldItalic*1 [12.3898 0 0 -12.3619 0 0 ]msf
301.548 106.192 mo
(t)sh
LBCVCL+Calibri-BoldItalic*1 [8.2598 0 0 -8.2413 0 0 ]msf
305.808 109.252 mo
(OX)
[5.21606 0 ]xsh
LBCVCL+Calibri-BoldItalic*1 [12.3898 0 0 -12.3619 0 0 ]msf
315.588 106.192 mo
(\))sh
268.728 93.5917 mo
267.768 92.8117 li
268.608 91.8517 li
269.568 92.6317 li
cp
266.868 92.0317 mo
265.908 91.2517 li
266.688 90.2917 li
267.648 91.0717 li
cp
264.948 90.4117 mo
263.988 89.6317 li
264.768 88.6717 li
265.728 89.5117 li
cp
263.028 88.8517 mo
262.068 88.0717 li
262.848 87.1117 li
263.808 87.8917 li
cp
261.108 87.2917 mo
260.148 86.4517 li
260.988 85.4917 li
261.948 86.3317 li
cp
259.248 85.6717 mo
258.288 84.8917 li
259.068 83.9317 li
260.028 84.7117 li
cp
257.328 84.1117 mo
256.368 83.3317 li
257.148 82.3717 li
258.108 83.1517 li
cp
255.408 82.4917 mo
254.448 81.7117 li
255.228 80.7517 li
256.188 81.5317 li
cp
253.488 80.9317 mo
252.528 80.1517 li
253.368 79.1917 li
254.328 79.9717 li
cp
251.628 79.3117 mo
250.728 78.5917 li
251.508 77.6317 li
252.408 78.4117 li
cp
249.588 80.8717 mo
246.828 74.5717 li
253.548 76.1317 li
.7529 .3137 .3019 rgb
f
302.988 93.6517 mo
304.008 92.9317 li
303.288 91.9117 li
302.268 92.6317 li
cp
305.028 92.2117 mo
306.048 91.4917 li
305.328 90.4717 li
304.308 91.1917 li
cp
307.008 90.7717 mo
308.028 90.0517 li
307.308 89.0317 li
306.288 89.7517 li
cp
309.048 89.3317 mo
310.068 88.6117 li
309.348 87.5917 li
308.328 88.3117 li
cp
311.088 87.8917 mo
312.048 87.1717 li
311.328 86.1517 li
310.368 86.8717 li
cp
313.068 86.4517 mo
314.088 85.7317 li
313.368 84.7117 li
312.348 85.4317 li
cp
315.108 85.0117 mo
316.128 84.2917 li
315.408 83.2717 li
314.388 83.9917 li
cp
317.148 83.5717 mo
318.108 82.8517 li
317.388 81.8317 li
316.428 82.5517 li
cp
319.128 82.1317 mo
320.148 81.4117 li
319.428 80.3917 li
318.408 81.1117 li
cp
321.168 80.6917 mo
322.188 79.9717 li
321.468 78.9517 li
320.448 79.6717 li
cp
323.148 79.2517 mo
324.168 78.5317 li
323.448 77.5117 li
322.428 78.2317 li
cp
325.428 80.6917 mo
328.668 74.5717 li
321.828 75.6517 li
f
1 0 0 rgb
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
LBCVCI+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
/bracketleft <1C60D8A8C9B81F2C3A069E97D4C1B29DA23BF51FA8AE87F396
9878E69D10DC348BAF69> |-
/bracketright <1C60D8A8C9B81F2C7D3B98BC3C6790041552B3C4749878E48
F0B17EDC12AFE367344> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBCVCI+TimesNewRomanPSMT /Encoding get
dup 50 /two put
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/LBCVCI+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period 2{/.notdef}rp /one /two /three 4{/.notdef}rp /eight 12{/.notdef}rp 
/E /F /G /H /I /J 2{/.notdef}rp /M 
/N 5{/.notdef}rp /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /j /.notdef /l /m /n /o /p 
/q /r /s /t /u /v /w /x 
/y 5{/.notdef}rp /quoteright 128{/.notdef}rp]
LBCVCI+TimesNewRomanPSMT nf
LBCVCI+TimesNewRomanPSMT*1 [8.8814 0 0 -8.8814 0 0 ]msf
205.248 106.792 mo
(1)sh
LBCVCI+TimesNewRomanPSMT*1 [12.2463 0 0 -12.2463 0 0 ]msf
219.708 103.612 mo
(22)
[14.1604 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [21.1831 0 0 -21.1831 0 0 ]msf
170.088 98.1517 mo
([])
[42.7791 0 ]xsh
gsave
190.848 106.312 mo
242.928 106.312 li
242.928 92.6317 li
190.848 92.6317 li
cp
clp
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [12.2463 0 0 -12.2463 0 0 ]msf
191.148 103.612 mo
(H)sh
grestore
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
LBCVCJ+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B77FE28E7B59861DA633FA42A38BF207DC4A11329E63F66801
0B05585B22E39E733F2B39E647F14D7DCD27965006EEC01D3FBB556E503629E4
5F186BD20587B6FF8BB4E525ABE63E26F210C9F85E012A8DB6F803B316624083
082E536A1274247334ADD37479C48FDB7D8ADD850A8832DF9217A2BFFEECF6DD
96F21564B9189ECF65AD0E783A58F9E296A99147AE132DD5B0142AB4EA574166
8F4195BDF7097E5D12CB419F2F282E538E1EB21217502E3C6B11740802EC650F
4D2ADCD4B1772219DAF6BE6429CF2030BDF9C05BA7A5D790670BD325C71A55CF
EDEE3AFA9492A129CF25024BDA2414AE27F397E2DB63BB72C98E3704AEDCD4D4
A43DA02887C90FEE11520BD99634849C2457543FCB5BD3F0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBCVCJ+TimesNewRomanPS-ItalicMT /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
/LBCVCJ+TimesNewRomanPS-ItalicMT*1 
[49{/.notdef}rp /one /two 19{/.notdef}rp /F /.notdef /H 3{/.notdef}rp 
/L /M /.notdef /O 8{/.notdef}rp /X 27{/.notdef}rp /t 
3{/.notdef}rp /x 135{/.notdef}rp]
LBCVCJ+TimesNewRomanPS-ItalicMT nf
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [12.2463 0 0 -12.2463 0 0 ]msf
199.968 103.612 mo
(Lx)
[27.2382 0 ]xsh
gsave
176.088 102.832 mo
218.628 102.832 li
218.628 76.9717 li
176.088 76.9717 li
cp
clp
%ADOBeginSubsetFont: UGXAAA+SymbolMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (UGXAAA+SymbolMT)
%%Title: (UGXAAA+SymbolMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /UGXAAA+SymbolMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -220 1113 1005} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 192 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7C3C9ED920C533BFCEF627DC3963E487931C80D1235BDD70
699E096A6312D> |
68 <001C60D8A8C9B66A6BA5FD431D86440FC5B17884920F72EF9985747FE48E
27D52B0A7328353282C2309CE0DAF5EDAE07A2F03F8B9B9AB66522FB6EAC947B
85F34B7699BBD2ABA7FA8935A5244D4597129134C591EEA22FFEF1079B95BC27
A2FBD7EDAE15DA79FA1678E7632858EFA7A6C752277BA1EA74BD33AE605DD0C8
E3AB194AA3A2FCDDEA7901B74FE55D675AEADC330A14CF35AC3D70CF0BABD57C
C6CAD6E7F5B99DF4A5DD912792A5DE6D73450168FA5163D865687D29832D77B9
0F6C62350B5F52E7016827145B9FCFDEF37982D054F7AA3F416639F51E> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /UGXAAA+SymbolMT-Identity-H /Identity-H 0 [/UGXAAA+SymbolMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LBCVCN+SymbolMT /UGXAAA+SymbolMT-Identity-H findfont ct_VMDictPut
LBCVCN+SymbolMT [21.1831 0 7.245 -21.1831 0 0 ]msf
176.088 98.1517 mo
(\000D)sh
grestore
0 .496 0 rgb
LBCVCI+TimesNewRomanPSMT*1 [10.4292 0 0 -10.4292 0 0 ]msf
298.908 18.1717 mo
(22)
[12.0603 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [18.0398 0 0 -18.0398 0 0 ]msf
258.048 13.5517 mo
([])
[35.0404 0 ]xsh
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [10.4292 0 0 -10.4292 0 0 ]msf
275.388 18.1717 mo
(OXx)
[7.4986 22.382 0 ]xsh
gsave
263.148 17.5117 mo
299.328 17.5117 li
299.328 -.788269 li
263.148 -.788269 li
cp
clp
LBCVCN+SymbolMT [18.0398 0 6.1699 -18.0398 0 0 ]msf
263.148 13.5517 mo
(\000D)sh
grestore
1 0 0 rgb
LBCVCI+TimesNewRomanPSMT*1 [8.6271 0 0 -8.6271 0 0 ]msf
372.588 103.552 mo
(2)sh
LBCVCI+TimesNewRomanPSMT*1 [11.896 0 0 -11.896 0 0 ]msf
387.228 100.432 mo
(22)
[13.7399 0 ]xsh
LBCVCI+TimesNewRomanPSMT*1 [20.5767 0 0 -20.5767 0 0 ]msf
337.608 95.1517 mo
([])
[43.0196 0 ]xsh
gsave
357.708 103.072 mo
409.848 103.072 li
409.848 89.8117 li
357.708 89.8117 li
cp
clp
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [11.896 0 0 -11.896 0 0 ]msf
358.008 100.432 mo
(H)sh
grestore
LBCVCJ+TimesNewRomanPS-ItalicMT*1 [11.896 0 0 -11.896 0 0 ]msf
366.528 100.432 mo
(Lx)
[28.0186 0 ]xsh
gsave
343.428 99.6517 mo
384.588 99.6517 li
384.588 74.5717 li
343.428 74.5717 li
cp
clp
LBCVCN+SymbolMT [20.5767 0 7.0376 -20.5767 0 0 ]msf
343.428 95.1517 mo
(\000D)sh
grestore
372.708 44.5717 mo
400.008 44.5717 li
400.008 45.1717 li
372.708 45.1717 li
cp
373.308 46.7317 mo
369.588 44.8717 li
373.308 43.0117 li
cp
399.348 43.0117 mo
403.068 44.8717 li
399.348 46.7317 li
0 0 0 rgb
f
.136538 .123054 .126659 rgb
LBCVCL+Calibri-BoldItalic*1 [14.8828 0 0 -14.849 0 0 ]msf
377.808 38.7516 mo
(t)sh
LBCVCL+Calibri-BoldItalic*1 [9.9342 0 0 -9.9117 0 0 ]msf
382.968 42.4117 mo
(FM)
[4.55978 0 ]xsh
171.648 44.5117 mo
198.888 44.5117 li
198.888 45.1717 li
171.648 45.1717 li
cp
172.248 46.6717 mo
168.528 44.8117 li
172.248 42.9517 li
cp
198.288 42.9517 mo
202.008 44.8117 li
198.288 46.6717 li
0 0 0 rgb
f
.136538 .123054 .126659 rgb
LBCVCL+Calibri-BoldItalic*1 [14.8828 0 0 -14.849 0 0 ]msf
176.688 38.6917 mo
(t)sh
LBCVCL+Calibri-BoldItalic*1 [9.9342 0 0 -9.9117 0 0 ]msf
181.908 42.3517 mo
(FM)
[4.55978 0 ]xsh
%ADOBeginSubsetFont: MZQAAA+ComicSansMS-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MZQAAA+ComicSansMS-Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 86 /V put
def
/FontBBox {-112 -303 1229 1102} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB47F32422EDA
B3B2C7C2F968214656> |-
/D <1C60D8A8C9B6079F62DC85BE6DC0FB5E7345DA24EDDAEBEAB73604620F6B
661576C5CDACC99277EC6C1FFA3CB100B9343BCF2CF061D57ED80A8D165EA920
BC4EEDEC5E9995D6A020D432825EAD91122BA1D4B7092463B66EF2D72AA00BA4
46DD697E99C10F0350E7B591B60AF4A1D543478D3D8332654506395F61EE8C66
08A668EC9B5A8CA9264FD35489C214F718AD52D85E251FDA836E18BAB677D08B
20A1404D383869CCACF9DAE1055FFC142A7052523B52A6F8388CC536A7599F6A
66> |-
/V <1C60D8A8C9B65648E372325951EE2B1E1BC6DD1E411636B7F1B68D096A0B
48FFE98C58960382D77720FFAE6C90BA844853F4F47EBBEF1D25938A448F318C
760B4E35649795E70B61195725CA1FFC86EED96501D3474FA898E9D148F67F9A
44501F28DD20E3D9EA497765D70391D8484F3D22F61F4BD38022B900261E691D
7074953FC23CC2F54AE1F46151B54C6F5626BFCBBEE943AC35717E7E4CCD044D
1618AC19010045EABFFD0A5695ACB3E9> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBCVCO+ComicSansMS-Bold /MZQAAA+ComicSansMS-Bold findfont ct_VMDictPut
/LBCVCO+ComicSansMS-Bold*1 
[68{/.notdef}rp /D 17{/.notdef}rp /V 169{/.notdef}rp]
LBCVCO+ComicSansMS-Bold nf
LBCVCO+ComicSansMS-Bold*1 [17.3756 0 0 -17.3365 0 0 ]msf
288.468 141.112 mo
(V)sh
LBCVCO+ComicSansMS-Bold*1 [11.5713 0 0 -11.5451 0 0 ]msf
300.228 145.432 mo
(D)sh
gsave
269.868 48.6517 mo
269.028 48.7717 li
268.068 49.0117 li
267.948 49.0717 li
267.588 49.1917 li
267.468 49.2517 li
267.288 49.3117 li
267.048 49.4317 li
266.868 49.4917 li
266.388 49.7317 li
266.328 49.7917 li
266.088 49.9117 li
266.028 49.9717 li
265.788 50.0917 li
265.728 50.1517 li
265.608 50.2117 li
265.488 50.3317 li
265.368 50.3917 li
265.308 50.4517 li
265.188 50.5117 li
265.068 50.6317 li
264.948 50.6917 li
264.528 51.1117 li
264.408 51.1717 li
264.108 51.4717 li
264.048 51.5917 li
263.628 52.0117 li
263.568 52.1317 li
263.448 52.2517 li
263.388 52.3717 li
263.268 52.4917 li
263.208 52.6117 li
263.088 52.7317 li
262.968 52.9717 li
262.908 53.0317 li
262.788 53.2717 li
262.728 53.3317 li
262.248 54.2917 li
262.128 54.6517 li
262.068 54.7717 li
261.948 55.1317 li
261.888 55.3717 li
261.828 55.5517 li
261.768 55.7917 li
261.708 56.0917 li
261.648 56.4517 li
261.588 56.8717 li
261.528 57.8317 li
261.588 57.8917 li
261.588 58.9117 li
261.648 58.9117 li
261.648 59.2717 li
261.708 59.2717 li
261.708 59.6917 li
261.768 59.6917 li
261.768 59.9317 li
261.828 59.9317 li
261.828 60.1717 li
261.888 60.1717 li
261.888 60.4117 li
261.948 60.4117 li
261.948 60.6517 li
262.008 60.6517 li
262.008 60.7717 li
262.068 60.7717 li
262.068 60.9517 li
262.128 60.9517 li
262.128 61.1317 li
262.188 61.1317 li
262.188 61.3117 li
262.248 61.3117 li
262.248 61.4317 li
262.308 61.4317 li
262.308 61.6117 li
262.368 61.6117 li
262.368 61.7317 li
262.428 61.7317 li
262.428 61.8517 li
262.488 61.8517 li
262.488 61.9717 li
262.548 61.9717 li
262.548 62.0917 li
262.608 62.0917 li
262.608 62.2117 li
262.668 62.2117 li
262.668 62.3317 li
262.728 62.3317 li
262.728 62.4517 li
262.788 62.4517 li
262.848 62.5117 li
262.848 62.6317 li
262.908 62.6317 li
262.968 62.6917 li
262.968 62.8117 li
263.028 62.8117 li
263.028 62.9317 li
263.088 62.9317 li
263.148 62.9917 li
263.148 63.1117 li
263.208 63.1117 li
263.328 63.2317 li
263.328 63.3517 li
263.388 63.3517 li
263.508 63.4717 li
263.508 63.5917 li
263.568 63.5917 li
263.688 63.7117 li
263.688 63.8317 li
263.748 63.8317 li
264.228 64.3117 li
264.228 64.4317 li
264.288 64.4317 li
264.408 64.4917 li
264.888 64.9717 li
265.008 65.0317 li
265.128 65.1517 li
265.248 65.2117 li
265.368 65.3317 li
265.488 65.3917 li
265.608 65.5117 li
265.728 65.5717 li
265.788 65.6317 li
266.028 65.7517 li
266.088 65.8117 li
266.328 65.9317 li
266.388 65.9917 li
266.868 66.2317 li
267.048 66.2917 li
267.288 66.4117 li
267.468 66.4717 li
267.588 66.5317 li
267.948 66.6517 li
268.068 66.7117 li
269.028 66.9517 li
269.868 67.0717 li
271.908 67.1317 li
271.908 67.0717 li
272.268 67.0117 li
272.688 66.9517 li
273.648 66.7117 li
273.828 66.6517 li
273.948 66.5917 li
274.488 66.4117 li
275.448 65.9317 li
275.508 65.8717 li
275.748 65.7517 li
275.808 65.6917 li
276.048 65.5717 li
276.168 65.4517 li
276.288 65.3917 li
276.348 65.3317 li
276.468 65.2717 li
276.588 65.1517 li
276.708 65.0917 li
277.068 64.7317 li
277.188 64.6717 li
277.668 64.1917 li
277.728 64.0717 li
278.088 63.7117 li
278.148 63.5917 li
278.268 63.4717 li
278.328 63.3517 li
278.388 63.2917 li
278.448 63.1717 li
278.568 63.0517 li
278.688 62.8117 li
278.748 62.7517 li
278.868 62.5117 li
278.928 62.4517 li
279.408 61.4917 li
279.588 60.9517 li
279.648 60.8317 li
279.708 60.6517 li
279.948 59.6917 li
280.008 59.2717 li
280.068 58.9117 li
280.128 56.8717 li
280.068 56.8717 li
280.068 56.4517 li
280.008 56.4517 li
280.008 56.0317 li
279.948 56.0317 li
279.948 55.7917 li
279.888 55.7917 li
279.888 55.5517 li
279.828 55.5517 li
279.828 55.3117 li
279.768 55.3117 li
279.768 55.1317 li
279.708 55.1317 li
279.708 54.9517 li
279.648 54.9517 li
279.648 54.7717 li
279.588 54.7717 li
279.588 54.5917 li
279.528 54.5917 li
279.528 54.4717 li
279.468 54.4717 li
279.468 54.2917 li
279.408 54.2917 li
279.408 54.1717 li
279.348 54.1717 li
279.348 54.0517 li
279.288 54.0517 li
279.288 53.9317 li
279.228 53.9317 li
279.228 53.8117 li
279.168 53.8117 li
279.168 53.6317 li
279.108 53.6317 li
279.108 53.5117 li
279.048 53.4517 li
278.988 53.4517 li
278.988 53.3317 li
278.928 53.3317 li
278.928 53.2117 li
278.868 53.1517 li
278.808 53.1517 li
278.808 53.0317 li
278.748 53.0317 li
278.748 52.9117 li
278.688 52.8517 li
278.628 52.8517 li
278.628 52.7317 li
278.568 52.6717 li
278.508 52.6717 li
278.508 52.5517 li
278.388 52.4317 li
278.328 52.4317 li
278.328 52.3117 li
278.208 52.1917 li
278.148 52.1917 li
278.148 52.0717 li
277.908 51.8317 li
277.848 51.8317 li
277.848 51.7117 li
277.128 50.9917 li
277.008 50.9317 li
276.708 50.6317 li
276.588 50.5717 li
276.468 50.4517 li
276.348 50.3917 li
276.228 50.2717 li
276.108 50.2117 li
276.048 50.1517 li
275.808 50.0317 li
275.748 49.9717 li
275.628 49.9117 li
275.568 49.8517 li
274.488 49.3117 li
273.948 49.1317 li
273.828 49.0717 li
273.648 49.0117 li
272.688 48.7717 li
272.268 48.7117 li
271.908 48.6517 li
eclp
261.468 67.1917 mo
280.188 67.1917 li
280.188 48.5317 li
261.468 48.5317 li
cp
/7 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[18.72 0 0 18.66 152.736 111.217 ]ct
snap_to_device
<<
/T 1
/W 312 
/H 1 
/M[312 0 0 -1 0 1 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WrN,!s8W-!s8W-!sA`0"9\l3"U,&5"U5/8"pP89"pYA<#RC\A#RC_C#mgnF$4@4L$O[@O$k*RS
%1NaV%Ls![%hB3_&.fEc&J>]h',)#n'GM8s()@Z$(Ddo*(`4,.)B'M5)]Kb:*$$%@*Zc@E+!;[K+<_pQ
+sJ6V,U=W],palb-7:/h-n$Jm.4Qes.P!&$/1`A)/hSb/0/"t40JG490etL>1G^gC1GgpG2)R6L2E!KQ
2`E]U3&ioY3BB2^3]]>a4$,Pe4?P_g4Ztql5!D.o5!M7r5<hCu5X7S"5s[e&5s[h(6:+"*6:+"+6UO4.
6UO4/6psF26psF26psI477BX677BX67Rfj:7Rfj:7Rfj:7Rfj:7Rfm<7n6'>7n6'>7n6'>~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
303.348 48.6517 mo
302.508 48.7717 li
301.548 49.0117 li
301.428 49.0717 li
301.068 49.1917 li
300.948 49.2517 li
300.768 49.3117 li
300.528 49.4317 li
300.348 49.4917 li
299.868 49.7317 li
299.808 49.7917 li
299.568 49.9117 li
299.508 49.9717 li
299.268 50.0917 li
299.208 50.1517 li
299.088 50.2117 li
298.968 50.3317 li
298.848 50.3917 li
298.788 50.4517 li
298.668 50.5117 li
298.548 50.6317 li
298.428 50.6917 li
298.008 51.1117 li
297.888 51.1717 li
297.588 51.4717 li
297.528 51.5917 li
297.108 52.0117 li
297.048 52.1317 li
296.928 52.2517 li
296.868 52.3717 li
296.748 52.4917 li
296.688 52.6117 li
296.568 52.7317 li
296.448 52.9717 li
296.388 53.0317 li
296.268 53.2717 li
296.208 53.3317 li
295.728 54.2917 li
295.608 54.6517 li
295.548 54.7717 li
295.428 55.1317 li
295.368 55.3717 li
295.308 55.5517 li
295.248 55.7917 li
295.188 56.0917 li
295.128 56.4517 li
295.068 56.8717 li
295.008 57.8317 li
295.068 57.8917 li
295.068 58.9117 li
295.128 58.9117 li
295.128 59.2717 li
295.188 59.2717 li
295.188 59.6917 li
295.248 59.6917 li
295.248 59.9317 li
295.308 59.9317 li
295.308 60.1717 li
295.368 60.1717 li
295.368 60.4117 li
295.428 60.4117 li
295.428 60.6517 li
295.488 60.6517 li
295.488 60.7717 li
295.548 60.7717 li
295.548 60.9517 li
295.608 60.9517 li
295.608 61.1317 li
295.668 61.1317 li
295.668 61.3117 li
295.728 61.3117 li
295.728 61.4317 li
295.788 61.4317 li
295.788 61.6117 li
295.848 61.6117 li
295.848 61.7317 li
295.908 61.7317 li
295.908 61.8517 li
295.968 61.8517 li
295.968 61.9717 li
296.028 61.9717 li
296.028 62.0917 li
296.088 62.0917 li
296.088 62.2117 li
296.148 62.2117 li
296.148 62.3317 li
296.208 62.3317 li
296.208 62.4517 li
296.268 62.4517 li
296.328 62.5117 li
296.328 62.6317 li
296.388 62.6317 li
296.448 62.6917 li
296.448 62.8117 li
296.508 62.8117 li
296.508 62.9317 li
296.568 62.9317 li
296.628 62.9917 li
296.628 63.1117 li
296.688 63.1117 li
296.808 63.2317 li
296.808 63.3517 li
296.868 63.3517 li
296.988 63.4717 li
296.988 63.5917 li
297.048 63.5917 li
297.168 63.7117 li
297.168 63.8317 li
297.228 63.8317 li
297.708 64.3117 li
297.708 64.4317 li
297.768 64.4317 li
297.888 64.4917 li
298.368 64.9717 li
298.488 65.0317 li
298.608 65.1517 li
298.728 65.2117 li
298.848 65.3317 li
298.968 65.3917 li
299.088 65.5117 li
299.208 65.5717 li
299.268 65.6317 li
299.508 65.7517 li
299.568 65.8117 li
299.808 65.9317 li
299.868 65.9917 li
300.348 66.2317 li
300.528 66.2917 li
300.768 66.4117 li
300.948 66.4717 li
301.068 66.5317 li
301.428 66.6517 li
301.548 66.7117 li
302.508 66.9517 li
303.348 67.0717 li
305.388 67.1317 li
305.388 67.0717 li
305.748 67.0117 li
306.168 66.9517 li
307.128 66.7117 li
307.308 66.6517 li
307.428 66.5917 li
307.968 66.4117 li
308.928 65.9317 li
308.988 65.8717 li
309.228 65.7517 li
309.288 65.6917 li
309.528 65.5717 li
309.648 65.4517 li
309.768 65.3917 li
309.828 65.3317 li
309.948 65.2717 li
310.068 65.1517 li
310.188 65.0917 li
310.548 64.7317 li
310.668 64.6717 li
311.148 64.1917 li
311.208 64.0717 li
311.568 63.7117 li
311.628 63.5917 li
311.748 63.4717 li
311.808 63.3517 li
311.868 63.2917 li
311.928 63.1717 li
312.048 63.0517 li
312.168 62.8117 li
312.228 62.7517 li
312.348 62.5117 li
312.408 62.4517 li
312.888 61.4917 li
313.068 60.9517 li
313.128 60.8317 li
313.188 60.6517 li
313.428 59.6917 li
313.488 59.2717 li
313.548 58.9117 li
313.608 56.8717 li
313.548 56.8717 li
313.548 56.4517 li
313.488 56.4517 li
313.488 56.0317 li
313.428 56.0317 li
313.428 55.7917 li
313.368 55.7917 li
313.368 55.5517 li
313.308 55.5517 li
313.308 55.3117 li
313.248 55.3117 li
313.248 55.1317 li
313.188 55.1317 li
313.188 54.9517 li
313.128 54.9517 li
313.128 54.7717 li
313.068 54.7717 li
313.068 54.5917 li
313.008 54.5917 li
313.008 54.4717 li
312.948 54.4717 li
312.948 54.2917 li
312.888 54.2917 li
312.888 54.1717 li
312.828 54.1717 li
312.828 54.0517 li
312.768 54.0517 li
312.768 53.9317 li
312.708 53.9317 li
312.708 53.8117 li
312.648 53.8117 li
312.648 53.6317 li
312.588 53.6317 li
312.588 53.5117 li
312.528 53.4517 li
312.468 53.4517 li
312.468 53.3317 li
312.408 53.3317 li
312.408 53.2117 li
312.348 53.1517 li
312.288 53.1517 li
312.288 53.0317 li
312.228 53.0317 li
312.228 52.9117 li
312.168 52.8517 li
312.108 52.8517 li
312.108 52.7317 li
312.048 52.6717 li
311.988 52.6717 li
311.988 52.5517 li
311.868 52.4317 li
311.808 52.4317 li
311.808 52.3117 li
311.688 52.1917 li
311.628 52.1917 li
311.628 52.0717 li
311.388 51.8317 li
311.328 51.8317 li
311.328 51.7117 li
310.608 50.9917 li
310.488 50.9317 li
310.188 50.6317 li
310.068 50.5717 li
309.948 50.4517 li
309.828 50.3917 li
309.708 50.2717 li
309.588 50.2117 li
309.528 50.1517 li
309.288 50.0317 li
309.228 49.9717 li
309.108 49.9117 li
309.048 49.8517 li
307.968 49.3117 li
307.428 49.1317 li
307.308 49.0717 li
307.128 49.0117 li
306.168 48.7717 li
305.748 48.7117 li
305.388 48.6517 li
eclp
294.948 67.1917 mo
313.668 67.1917 li
313.668 48.5317 li
294.948 48.5317 li
cp
/7 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[18.72 0 0 18.66 186.216 111.217 ]ct
snap_to_device
<<
/T 1
/W 312 
/H 1 
/M[312 0 0 -1 0 1 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WrN,!s8W-!s8W-!sA`0"9\l3"U,&5"U5/8"pP89"pYA<#RC\A#RC_C#mgnF$47.K$O[@O$k*RS
%1NaV%LrsZ%hB3_&.fEc&J>]h',)#m'GM8s()@Z$(Ddo*(`4,.)B'M5)]K_9*$$%@*Zc@E+!;[K+<_pQ
+sJ6V,U=W],palb-7:/h-n$Jm.4Qes.P!&$/1`A)/hSb/0/"t40JG490etL>1G^gC1GgpG2)R6L2E!KQ
2`E]U3&ioY3BB2^3]]>a4$,Pe4?P_g4Ztqk5!D.o5!D1q5<hCu5X7S"5s[e&5s[e'6:+"*6:+"+6UO4.
6UO4/6psF26psF26psI477BX677BX67Rfj:7Rfj:7Rfj:7Rfj:7Rfm<7n6'>7n6'>7n6'>~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
202.848 48.6517 mo
202.488 48.7117 li
202.068 48.7717 li
201.108 49.0117 li
200.928 49.0717 li
200.808 49.1317 li
200.268 49.3117 li
199.188 49.8517 li
199.128 49.9117 li
199.008 49.9717 li
198.948 50.0317 li
198.708 50.1517 li
198.648 50.2117 li
198.528 50.2717 li
198.408 50.3917 li
198.288 50.4517 li
198.168 50.5717 li
198.048 50.6317 li
197.748 50.9317 li
197.628 50.9917 li
196.908 51.7117 li
196.848 51.8317 li
196.608 52.0717 li
196.548 52.1917 li
196.428 52.3117 li
196.368 52.4317 li
196.248 52.5517 li
196.188 52.6717 li
196.128 52.7317 li
196.068 52.8517 li
196.008 52.9117 li
195.888 53.1517 li
195.828 53.2117 li
195.708 53.4517 li
195.648 53.5117 li
195.588 53.6317 li
195.528 53.8117 li
195.288 54.2917 li
195.228 54.4717 li
195.168 54.5917 li
194.928 55.3117 li
194.748 56.0317 li
194.628 56.8717 li
194.568 57.8317 li
194.628 57.8917 li
194.628 58.9117 li
194.688 58.9117 li
194.688 59.2717 li
194.748 59.2717 li
194.748 59.6917 li
194.808 59.6917 li
194.808 59.9317 li
194.868 59.9317 li
194.868 60.1717 li
194.928 60.1717 li
194.928 60.4117 li
194.988 60.4117 li
194.988 60.6517 li
195.048 60.6517 li
195.048 60.8317 li
195.108 60.8317 li
195.108 60.9517 li
195.168 60.9517 li
195.168 61.1317 li
195.228 61.1317 li
195.228 61.3117 li
195.288 61.3117 li
195.288 61.4917 li
195.348 61.4917 li
195.348 61.6117 li
195.408 61.6117 li
195.408 61.7317 li
195.468 61.7317 li
195.468 61.8517 li
195.528 61.8517 li
195.528 61.9717 li
195.588 61.9717 li
195.588 62.0917 li
195.648 62.0917 li
195.648 62.2117 li
195.708 62.2117 li
195.708 62.3317 li
195.768 62.3317 li
195.768 62.4517 li
195.828 62.4517 li
195.888 62.5117 li
195.888 62.6317 li
195.948 62.6317 li
195.948 62.7517 li
196.008 62.7517 li
196.068 62.8117 li
196.068 62.9317 li
196.128 62.9317 li
196.128 63.0517 li
196.188 63.0517 li
196.308 63.1717 li
196.308 63.2917 li
196.368 63.2917 li
196.428 63.3517 li
196.428 63.4717 li
196.488 63.4717 li
196.608 63.5917 li
196.608 63.7117 li
196.668 63.7117 li
197.028 64.0717 li
197.028 64.1917 li
197.088 64.1917 li
197.568 64.6717 li
197.688 64.7317 li
198.048 65.0917 li
198.168 65.1517 li
198.288 65.2717 li
198.408 65.3317 li
198.468 65.3917 li
198.588 65.4517 li
198.708 65.5717 li
198.948 65.6917 li
199.008 65.7517 li
199.248 65.8717 li
199.308 65.9317 li
200.268 66.4117 li
200.808 66.5917 li
200.928 66.6517 li
201.108 66.7117 li
202.068 66.9517 li
202.488 67.0117 li
202.848 67.0717 li
204.948 67.1317 li
204.948 67.0717 li
205.308 67.0117 li
205.728 66.9517 li
206.688 66.7117 li
206.868 66.6517 li
206.988 66.5917 li
207.528 66.4117 li
208.488 65.9317 li
208.548 65.8717 li
208.788 65.7517 li
208.848 65.6917 li
209.088 65.5717 li
209.208 65.4517 li
209.328 65.3917 li
209.388 65.3317 li
209.508 65.2717 li
209.628 65.1517 li
209.748 65.0917 li
210.108 64.7317 li
210.228 64.6717 li
210.708 64.1917 li
210.768 64.0717 li
211.128 63.7117 li
211.188 63.5917 li
211.308 63.4717 li
211.368 63.3517 li
211.428 63.2917 li
211.488 63.1717 li
211.608 63.0517 li
211.728 62.8117 li
211.788 62.7517 li
211.908 62.5117 li
211.968 62.4517 li
212.448 61.4917 li
212.628 60.9517 li
212.688 60.8317 li
212.748 60.6517 li
212.988 59.6917 li
213.048 59.2717 li
213.108 58.9117 li
213.168 56.8717 li
213.108 56.8717 li
213.108 56.4517 li
213.048 56.4517 li
213.048 56.0317 li
212.988 56.0317 li
212.988 55.7917 li
212.928 55.7917 li
212.928 55.5517 li
212.868 55.5517 li
212.868 55.3117 li
212.808 55.3117 li
212.808 55.1317 li
212.748 55.1317 li
212.748 54.9517 li
212.688 54.9517 li
212.688 54.7717 li
212.628 54.7717 li
212.628 54.5917 li
212.568 54.5917 li
212.568 54.4717 li
212.508 54.4717 li
212.508 54.2917 li
212.448 54.2917 li
212.448 54.1717 li
212.388 54.1717 li
212.388 54.0517 li
212.328 54.0517 li
212.328 53.9317 li
212.268 53.9317 li
212.268 53.8117 li
212.208 53.8117 li
212.208 53.6317 li
212.148 53.6317 li
212.148 53.5117 li
212.088 53.4517 li
212.028 53.4517 li
212.028 53.3317 li
211.968 53.3317 li
211.968 53.2117 li
211.908 53.1517 li
211.848 53.1517 li
211.848 53.0317 li
211.788 53.0317 li
211.788 52.9117 li
211.728 52.8517 li
211.668 52.8517 li
211.668 52.7317 li
211.608 52.6717 li
211.548 52.6717 li
211.548 52.5517 li
211.428 52.4317 li
211.368 52.4317 li
211.368 52.3117 li
211.248 52.1917 li
211.188 52.1917 li
211.188 52.0717 li
210.948 51.8317 li
210.888 51.8317 li
210.888 51.7117 li
210.168 50.9917 li
210.048 50.9317 li
209.748 50.6317 li
209.628 50.5717 li
209.508 50.4517 li
209.388 50.3917 li
209.268 50.2717 li
209.148 50.2117 li
209.088 50.1517 li
208.848 50.0317 li
208.788 49.9717 li
208.668 49.9117 li
208.608 49.8517 li
207.528 49.3117 li
206.988 49.1317 li
206.868 49.0717 li
206.688 49.0117 li
205.728 48.7717 li
205.308 48.7117 li
204.948 48.6517 li
eclp
194.508 67.1917 mo
213.228 67.1917 li
213.228 48.5317 li
194.508 48.5317 li
cp
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[18.72 0 0 18.66 85.7764 111.217 ]ct
snap_to_device
<<
/T 1
/W 312 
/H 1 
/M[312 0 0 -1 0 1 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!s8W-"9\i1"9er4"U5/8"pYA<#RC\A#mgnF$4@7N%1NaU%Ls![%hK9a&J5Wg',2/s(Ddo+)&X>2
)]Th;*?H:F+<_mP,:"N[,pjrc-R^Dn.Olr"/M/S-0/,+91,:XB2)[?O2`NfY3]fGe4[)%o5X@_'6UO71
7Rfm=8P2TI92&&T:JXe`;,U:j<)lt"<``C+>$>*6>[:ZC?XI2L@U`hXAS,OdB4u!nC2.O"Ci+'-DJsK5
E,fo=F)uDEF`hkOGBe@XH?smaH[L3gI=6QnIt)ruJUrE)JqJ]/KS5#4L51P>LPUbBLl$tFMMd:LN/W^S
NK&pWNfK-[NfK0]O,o?`OH>QcOHGZfOcbcgOckljP*1ukP*;)nPEV2oPEV2pQ'IW"Q'IW"~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
236.388 48.6517 mo
235.548 48.7717 li
234.588 49.0117 li
234.468 49.0717 li
234.108 49.1917 li
233.988 49.2517 li
233.808 49.3117 li
233.568 49.4317 li
233.388 49.4917 li
232.908 49.7317 li
232.848 49.7917 li
232.608 49.9117 li
232.548 49.9717 li
232.308 50.0917 li
232.248 50.1517 li
232.128 50.2117 li
232.008 50.3317 li
231.888 50.3917 li
231.828 50.4517 li
231.708 50.5117 li
231.588 50.6317 li
231.468 50.6917 li
231.048 51.1117 li
230.928 51.1717 li
230.628 51.4717 li
230.568 51.5917 li
230.148 52.0117 li
230.088 52.1317 li
229.968 52.2517 li
229.908 52.3717 li
229.788 52.4917 li
229.728 52.6117 li
229.608 52.7317 li
229.488 52.9717 li
229.428 53.0317 li
229.308 53.2717 li
229.248 53.3317 li
228.768 54.2917 li
228.648 54.6517 li
228.588 54.7717 li
228.468 55.1317 li
228.408 55.3717 li
228.348 55.5517 li
228.288 55.7917 li
228.228 56.0917 li
228.168 56.4517 li
228.108 56.8717 li
228.048 57.8317 li
228.108 57.8917 li
228.108 58.9117 li
228.168 58.9117 li
228.168 59.2717 li
228.228 59.2717 li
228.228 59.6917 li
228.288 59.6917 li
228.288 59.9317 li
228.348 59.9317 li
228.348 60.1717 li
228.408 60.1717 li
228.408 60.4117 li
228.468 60.4117 li
228.468 60.6517 li
228.528 60.6517 li
228.528 60.7717 li
228.588 60.7717 li
228.588 60.9517 li
228.648 60.9517 li
228.648 61.1317 li
228.708 61.1317 li
228.708 61.3117 li
228.768 61.3117 li
228.768 61.4317 li
228.828 61.4317 li
228.828 61.6117 li
228.888 61.6117 li
228.888 61.7317 li
228.948 61.7317 li
228.948 61.8517 li
229.008 61.8517 li
229.008 61.9717 li
229.068 61.9717 li
229.068 62.0917 li
229.128 62.0917 li
229.128 62.2117 li
229.188 62.2117 li
229.188 62.3317 li
229.248 62.3317 li
229.248 62.4517 li
229.308 62.4517 li
229.368 62.5117 li
229.368 62.6317 li
229.428 62.6317 li
229.488 62.6917 li
229.488 62.8117 li
229.548 62.8117 li
229.548 62.9317 li
229.608 62.9317 li
229.668 62.9917 li
229.668 63.1117 li
229.728 63.1117 li
229.848 63.2317 li
229.848 63.3517 li
229.908 63.3517 li
230.028 63.4717 li
230.028 63.5917 li
230.088 63.5917 li
230.208 63.7117 li
230.208 63.8317 li
230.268 63.8317 li
230.748 64.3117 li
230.748 64.4317 li
230.808 64.4317 li
230.928 64.4917 li
231.408 64.9717 li
231.528 65.0317 li
231.648 65.1517 li
231.768 65.2117 li
231.888 65.3317 li
232.008 65.3917 li
232.128 65.5117 li
232.248 65.5717 li
232.308 65.6317 li
232.548 65.7517 li
232.608 65.8117 li
232.848 65.9317 li
232.908 65.9917 li
233.388 66.2317 li
233.568 66.2917 li
233.808 66.4117 li
233.988 66.4717 li
234.108 66.5317 li
234.468 66.6517 li
234.588 66.7117 li
235.548 66.9517 li
236.388 67.0717 li
238.428 67.1317 li
238.428 67.0717 li
238.788 67.0117 li
239.208 66.9517 li
240.168 66.7117 li
240.348 66.6517 li
240.468 66.5917 li
241.008 66.4117 li
241.968 65.9317 li
242.028 65.8717 li
242.268 65.7517 li
242.328 65.6917 li
242.568 65.5717 li
242.688 65.4517 li
242.808 65.3917 li
242.868 65.3317 li
242.988 65.2717 li
243.108 65.1517 li
243.228 65.0917 li
243.588 64.7317 li
243.708 64.6717 li
244.188 64.1917 li
244.248 64.0717 li
244.608 63.7117 li
244.668 63.5917 li
244.788 63.4717 li
244.848 63.3517 li
244.908 63.2917 li
244.968 63.1717 li
245.088 63.0517 li
245.208 62.8117 li
245.268 62.7517 li
245.388 62.5117 li
245.448 62.4517 li
245.928 61.4917 li
246.108 60.9517 li
246.168 60.8317 li
246.228 60.6517 li
246.468 59.6917 li
246.528 59.2717 li
246.588 58.9117 li
246.648 56.8717 li
246.588 56.8717 li
246.588 56.4517 li
246.528 56.4517 li
246.528 56.0317 li
246.468 56.0317 li
246.468 55.7917 li
246.408 55.7917 li
246.408 55.5517 li
246.348 55.5517 li
246.348 55.3117 li
246.288 55.3117 li
246.288 55.1317 li
246.228 55.1317 li
246.228 54.9517 li
246.168 54.9517 li
246.168 54.7717 li
246.108 54.7717 li
246.108 54.5917 li
246.048 54.5917 li
246.048 54.4717 li
245.988 54.4717 li
245.988 54.2917 li
245.928 54.2917 li
245.928 54.1717 li
245.868 54.1717 li
245.868 54.0517 li
245.808 54.0517 li
245.808 53.9317 li
245.748 53.9317 li
245.748 53.8117 li
245.688 53.8117 li
245.688 53.6317 li
245.628 53.6317 li
245.628 53.5117 li
245.568 53.4517 li
245.508 53.4517 li
245.508 53.3317 li
245.448 53.3317 li
245.448 53.2117 li
245.388 53.1517 li
245.328 53.1517 li
245.328 53.0317 li
245.268 53.0317 li
245.268 52.9117 li
245.208 52.8517 li
245.148 52.8517 li
245.148 52.7317 li
245.088 52.6717 li
245.028 52.6717 li
245.028 52.5517 li
244.908 52.4317 li
244.848 52.4317 li
244.848 52.3117 li
244.728 52.1917 li
244.668 52.1917 li
244.668 52.0717 li
244.428 51.8317 li
244.368 51.8317 li
244.368 51.7117 li
243.648 50.9917 li
243.528 50.9317 li
243.228 50.6317 li
243.108 50.5717 li
242.988 50.4517 li
242.868 50.3917 li
242.748 50.2717 li
242.628 50.2117 li
242.568 50.1517 li
242.328 50.0317 li
242.268 49.9717 li
242.148 49.9117 li
242.088 49.8517 li
241.008 49.3117 li
240.468 49.1317 li
240.348 49.0717 li
240.168 49.0117 li
239.208 48.7717 li
238.788 48.7117 li
238.428 48.6517 li
eclp
227.988 67.1917 mo
246.708 67.1917 li
246.708 48.5317 li
227.988 48.5317 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[18.72 0 0 18.66 119.256 111.217 ]ct
snap_to_device
<<
/T 1
/W 312 
/H 1 
/M[312 0 0 -1 0 1 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!s8W-!sA`0"9er4"U5/8"pYA<#RC\A#mgnE$4@7N%1NaU%Ls![%hK9a&J5Wg',2/s(Ddo+)&X>2
)]Th;*?H:F+X/*T,U=Z^-7:/g-n-Vr.k</&/hSb00JP==1G^jF2E*QS3&s#\4$5Yi5!D1r5sdq+6psI5
7n6*A8kVfM9MJ8X:f1+g;cH^r<``C*=BSg3>[1N>?=.)J@:<VTA7T7`B4tslBkhF!CM[j)DJsH4E,fo=
EcZ>EF`hhMGB\:VH$Xd`I!g<iI=?WoIt*!!J:W9'K7ef0KS>,7L5(G<Ll$tFM2I1JMMmCNN/W^TNfK-[
O,o?_OH>QcOH>QdOcbchP*1ukP*;)nPEV2oPE_;rPa%DsPa.N!Q'IW"Q'IW#Q^=&*Q^=&*~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
336.828 48.6517 mo
336.468 48.7117 li
336.048 48.7717 li
335.088 49.0117 li
334.728 49.1317 li
334.608 49.1917 li
334.248 49.3117 li
333.168 49.8517 li
333.108 49.9117 li
332.868 50.0317 li
332.808 50.0917 li
332.568 50.2117 li
332.448 50.3317 li
332.328 50.3917 li
332.208 50.5117 li
332.088 50.5717 li
331.968 50.6917 li
331.848 50.7517 li
331.368 51.2317 li
331.248 51.2917 li
331.188 51.3517 li
331.128 51.4717 li
330.588 52.0117 li
330.528 52.1317 li
330.408 52.2517 li
330.348 52.3717 li
330.228 52.4917 li
330.168 52.6117 li
330.108 52.6717 li
330.048 52.7917 li
329.988 52.8517 li
329.928 52.9717 li
329.868 53.0317 li
329.748 53.2717 li
329.688 53.3317 li
329.208 54.2917 li
329.088 54.6517 li
329.028 54.7717 li
328.908 55.1317 li
328.848 55.3717 li
328.788 55.5517 li
328.728 55.7917 li
328.668 56.0917 li
328.608 56.4517 li
328.548 56.8717 li
328.488 57.8317 li
328.548 57.8917 li
328.548 58.9117 li
328.608 58.9117 li
328.608 59.2717 li
328.668 59.2717 li
328.668 59.6917 li
328.728 59.6917 li
328.728 59.9317 li
328.788 59.9317 li
328.788 60.1717 li
328.848 60.1717 li
328.848 60.4117 li
328.908 60.4117 li
328.908 60.6517 li
328.968 60.6517 li
328.968 60.7717 li
329.028 60.7717 li
329.028 60.9517 li
329.088 60.9517 li
329.088 61.1317 li
329.148 61.1317 li
329.148 61.2517 li
329.208 61.2517 li
329.208 61.4317 li
329.268 61.4317 li
329.268 61.5517 li
329.328 61.5517 li
329.328 61.6717 li
329.388 61.6717 li
329.388 61.8517 li
329.448 61.8517 li
329.448 61.9717 li
329.508 61.9717 li
329.508 62.0917 li
329.568 62.0917 li
329.568 62.2117 li
329.628 62.2117 li
329.628 62.3317 li
329.688 62.3317 li
329.748 62.3917 li
329.748 62.5117 li
329.808 62.5117 li
329.808 62.6317 li
329.868 62.6317 li
329.928 62.6917 li
329.928 62.8117 li
329.988 62.8117 li
329.988 62.9317 li
330.048 62.9317 li
330.108 62.9917 li
330.108 63.1117 li
330.168 63.1117 li
330.288 63.2317 li
330.288 63.3517 li
330.348 63.3517 li
330.468 63.4717 li
330.468 63.5917 li
330.528 63.5917 li
330.648 63.7117 li
330.648 63.8317 li
330.708 63.8317 li
331.848 64.9717 li
331.968 65.0317 li
332.088 65.1517 li
332.208 65.2117 li
332.328 65.3317 li
332.448 65.3917 li
332.508 65.4517 li
332.628 65.5117 li
332.688 65.5717 li
332.808 65.6317 li
332.868 65.6917 li
333.108 65.8117 li
333.168 65.8717 li
334.248 66.4117 li
334.608 66.5317 li
334.728 66.5917 li
335.088 66.7117 li
336.048 66.9517 li
336.468 67.0117 li
336.828 67.0717 li
338.868 67.1317 li
338.868 67.0717 li
339.708 66.9517 li
340.668 66.7117 li
340.788 66.6517 li
341.148 66.5317 li
341.268 66.4717 li
341.448 66.4117 li
341.688 66.2917 li
341.868 66.2317 li
342.348 65.9917 li
342.408 65.9317 li
342.648 65.8117 li
342.708 65.7517 li
342.948 65.6317 li
343.008 65.5717 li
343.128 65.5117 li
343.248 65.3917 li
343.368 65.3317 li
343.488 65.2117 li
343.608 65.1517 li
343.728 65.0317 li
343.848 64.9717 li
344.328 64.4917 li
344.448 64.4317 li
344.508 64.3117 li
344.988 63.8317 li
345.048 63.7117 li
345.168 63.5917 li
345.228 63.4717 li
345.348 63.3517 li
345.408 63.2317 li
345.528 63.1117 li
345.588 62.9917 li
345.648 62.9317 li
345.768 62.6917 li
345.828 62.6317 li
345.888 62.5117 li
345.948 62.4517 li
346.368 61.6117 li
346.428 61.4317 li
346.488 61.3117 li
346.668 60.7717 li
346.728 60.6517 li
346.968 59.6917 li
347.028 59.2717 li
347.088 58.9117 li
347.148 56.8717 li
347.088 56.8717 li
347.088 56.4517 li
347.028 56.4517 li
347.028 56.0917 li
346.968 56.0917 li
346.968 55.7917 li
346.908 55.7917 li
346.908 55.5517 li
346.848 55.5517 li
346.848 55.3717 li
346.788 55.3717 li
346.788 55.1317 li
346.728 55.1317 li
346.728 54.9517 li
346.668 54.9517 li
346.668 54.7717 li
346.608 54.7717 li
346.608 54.6517 li
346.548 54.6517 li
346.548 54.4717 li
346.488 54.4717 li
346.488 54.2917 li
346.428 54.2917 li
346.428 54.1717 li
346.368 54.1717 li
346.368 54.0517 li
346.308 54.0517 li
346.308 53.9317 li
346.248 53.9317 li
346.248 53.8117 li
346.188 53.8117 li
346.188 53.6917 li
346.128 53.6917 li
346.128 53.5717 li
346.068 53.5717 li
346.068 53.4517 li
346.008 53.4517 li
346.008 53.3317 li
345.948 53.2717 li
345.888 53.2717 li
345.888 53.1517 li
345.828 53.1517 li
345.828 53.0317 li
345.768 52.9717 li
345.708 52.9717 li
345.708 52.8517 li
345.648 52.8517 li
345.648 52.7317 li
345.528 52.6117 li
345.468 52.6117 li
345.468 52.4917 li
345.348 52.3717 li
345.288 52.3717 li
345.288 52.2517 li
345.168 52.1317 li
345.108 52.1317 li
345.108 52.0117 li
344.688 51.5917 li
344.628 51.5917 li
344.628 51.4717 li
344.328 51.1717 li
344.208 51.1117 li
343.788 50.6917 li
343.668 50.6317 li
343.548 50.5117 li
343.428 50.4517 li
343.368 50.3917 li
343.248 50.3317 li
343.128 50.2117 li
343.008 50.1517 li
342.948 50.0917 li
342.708 49.9717 li
342.648 49.9117 li
342.408 49.7917 li
342.348 49.7317 li
341.868 49.4917 li
341.688 49.4317 li
341.448 49.3117 li
341.268 49.2517 li
341.148 49.1917 li
340.788 49.0717 li
340.668 49.0117 li
339.708 48.7717 li
338.868 48.6517 li
eclp
328.488 67.1917 mo
347.208 67.1917 li
347.208 48.5317 li
328.488 48.5317 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[18.72 0 0 18.66 219.756 111.217 ]ct
snap_to_device
<<
/T 1
/W 312 
/H 1 
/M[312 0 0 -1 0 1 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE*!s8W-"9\i1"9er4"pP89#6tJ=#RC\B#mgnF$OdFP%1NaV%Ls![&.fBb&J>]i',2/s()@]'(`=2/
)B0V8*?H:F+X&$R,:"N\,pjrd-n-Sp.P!&%/M/S.0JG4:1,CaE2E*TT3B9,^4?Ykl5!M:u5sdq,6q'O6
7n?3D8kVfN9hnJ\;,U:i;cHat='&L+=^#$6>[1Q@?XI2L@:E\UA7]@cB4tsmC27U#Ci+$+DJsK5EH-#>
F*)MGF`hkOGB\:WH?smaI!g?jI=?WpIt3'"JUrE*K7ei1KnY58L5(J=Ll$tFMMd:KMi3LON/WaVNfK-\
O,o?_OH>QcOH>TeOcbchP*1ukP*;)nPEV2oPa%DsPa%DsPa.N!Q'IW"Q'IZ%Q^=&*Q^=&*~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
370.308 48.6517 mo
369.948 48.7117 li
369.528 48.7717 li
368.568 49.0117 li
368.388 49.0717 li
368.268 49.1317 li
367.728 49.3117 li
366.648 49.8517 li
366.588 49.9117 li
366.468 49.9717 li
366.408 50.0317 li
366.168 50.1517 li
366.108 50.2117 li
365.988 50.2717 li
365.868 50.3917 li
365.748 50.4517 li
365.628 50.5717 li
365.508 50.6317 li
365.208 50.9317 li
365.088 50.9917 li
364.368 51.7117 li
364.308 51.8317 li
364.068 52.0717 li
364.008 52.1917 li
363.888 52.3117 li
363.828 52.4317 li
363.708 52.5517 li
363.648 52.6717 li
363.588 52.7317 li
363.528 52.8517 li
363.468 52.9117 li
363.348 53.1517 li
363.288 53.2117 li
363.168 53.4517 li
363.108 53.5117 li
363.048 53.6317 li
362.988 53.8117 li
362.748 54.2917 li
362.688 54.4717 li
362.628 54.5917 li
362.388 55.3117 li
362.208 56.0317 li
362.088 56.8717 li
362.028 57.8317 li
362.088 57.8917 li
362.088 58.9117 li
362.148 58.9117 li
362.148 59.2717 li
362.208 59.2717 li
362.208 59.6917 li
362.268 59.6917 li
362.268 59.9317 li
362.328 59.9317 li
362.328 60.1717 li
362.388 60.1717 li
362.388 60.4117 li
362.448 60.4117 li
362.448 60.6517 li
362.508 60.6517 li
362.508 60.8317 li
362.568 60.8317 li
362.568 60.9517 li
362.628 60.9517 li
362.628 61.1317 li
362.688 61.1317 li
362.688 61.3117 li
362.748 61.3117 li
362.748 61.4917 li
362.808 61.4917 li
362.808 61.6117 li
362.868 61.6117 li
362.868 61.7317 li
362.928 61.7317 li
362.928 61.8517 li
362.988 61.8517 li
362.988 61.9717 li
363.048 61.9717 li
363.048 62.0917 li
363.108 62.0917 li
363.108 62.2117 li
363.168 62.2117 li
363.168 62.3317 li
363.228 62.3317 li
363.228 62.4517 li
363.288 62.4517 li
363.348 62.5117 li
363.348 62.6317 li
363.408 62.6317 li
363.408 62.7517 li
363.468 62.7517 li
363.528 62.8117 li
363.528 62.9317 li
363.588 62.9317 li
363.588 63.0517 li
363.648 63.0517 li
363.768 63.1717 li
363.768 63.2917 li
363.828 63.2917 li
363.888 63.3517 li
363.888 63.4717 li
363.948 63.4717 li
364.068 63.5917 li
364.068 63.7117 li
364.128 63.7117 li
364.488 64.0717 li
364.488 64.1917 li
364.548 64.1917 li
365.028 64.6717 li
365.148 64.7317 li
365.508 65.0917 li
365.628 65.1517 li
365.748 65.2717 li
365.868 65.3317 li
365.928 65.3917 li
366.048 65.4517 li
366.168 65.5717 li
366.408 65.6917 li
366.468 65.7517 li
366.708 65.8717 li
366.768 65.9317 li
367.728 66.4117 li
368.268 66.5917 li
368.388 66.6517 li
368.568 66.7117 li
369.528 66.9517 li
369.948 67.0117 li
370.308 67.0717 li
372.348 67.1317 li
372.348 67.0717 li
373.188 66.9517 li
374.148 66.7117 li
374.268 66.6517 li
374.628 66.5317 li
374.748 66.4717 li
374.928 66.4117 li
375.168 66.2917 li
375.348 66.2317 li
375.828 65.9917 li
375.888 65.9317 li
376.128 65.8117 li
376.188 65.7517 li
376.428 65.6317 li
376.488 65.5717 li
376.608 65.5117 li
376.728 65.3917 li
376.848 65.3317 li
376.968 65.2117 li
377.088 65.1517 li
377.208 65.0317 li
377.328 64.9717 li
377.808 64.4917 li
377.928 64.4317 li
377.988 64.3117 li
378.468 63.8317 li
378.528 63.7117 li
378.648 63.5917 li
378.708 63.4717 li
378.828 63.3517 li
378.888 63.2317 li
379.008 63.1117 li
379.068 62.9917 li
379.128 62.9317 li
379.248 62.6917 li
379.308 62.6317 li
379.368 62.5117 li
379.428 62.4517 li
379.848 61.6117 li
379.908 61.4317 li
379.968 61.3117 li
380.148 60.7717 li
380.208 60.6517 li
380.448 59.6917 li
380.508 59.2717 li
380.568 58.9117 li
380.628 56.8717 li
380.568 56.8717 li
380.568 56.4517 li
380.508 56.4517 li
380.508 56.0917 li
380.448 56.0917 li
380.448 55.7917 li
380.388 55.7917 li
380.388 55.5517 li
380.328 55.5517 li
380.328 55.3717 li
380.268 55.3717 li
380.268 55.1317 li
380.208 55.1317 li
380.208 54.9517 li
380.148 54.9517 li
380.148 54.7717 li
380.088 54.7717 li
380.088 54.6517 li
380.028 54.6517 li
380.028 54.4717 li
379.968 54.4717 li
379.968 54.2917 li
379.908 54.2917 li
379.908 54.1717 li
379.848 54.1717 li
379.848 54.0517 li
379.788 54.0517 li
379.788 53.9317 li
379.728 53.9317 li
379.728 53.8117 li
379.668 53.8117 li
379.668 53.6917 li
379.608 53.6917 li
379.608 53.5717 li
379.548 53.5717 li
379.548 53.4517 li
379.488 53.4517 li
379.488 53.3317 li
379.428 53.2717 li
379.368 53.2717 li
379.368 53.1517 li
379.308 53.1517 li
379.308 53.0317 li
379.248 52.9717 li
379.188 52.9717 li
379.188 52.8517 li
379.128 52.8517 li
379.128 52.7317 li
379.008 52.6117 li
378.948 52.6117 li
378.948 52.4917 li
378.828 52.3717 li
378.768 52.3717 li
378.768 52.2517 li
378.648 52.1317 li
378.588 52.1317 li
378.588 52.0117 li
378.168 51.5917 li
378.108 51.5917 li
378.108 51.4717 li
377.808 51.1717 li
377.688 51.1117 li
377.268 50.6917 li
377.148 50.6317 li
377.028 50.5117 li
376.908 50.4517 li
376.848 50.3917 li
376.728 50.3317 li
376.608 50.2117 li
376.488 50.1517 li
376.428 50.0917 li
376.188 49.9717 li
376.128 49.9117 li
375.888 49.7917 li
375.828 49.7317 li
375.348 49.4917 li
375.168 49.4317 li
374.928 49.3117 li
374.748 49.2517 li
374.628 49.1917 li
374.268 49.0717 li
374.148 49.0117 li
373.188 48.7717 li
372.348 48.6517 li
eclp
361.968 67.1917 mo
380.688 67.1917 li
380.688 48.5317 li
361.968 48.5317 li
cp
/3 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[18.72 0 0 18.66 253.236 111.217 ]ct
snap_to_device
<<
/T 1
/W 312 
/H 1 
/M[312 0 0 -1 0 1 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE*!s8W-"9\i1"9er4"pP89#6tJ=#RC\B#mgnF$OdFP%1NaV%Ls![&.fBb&J>]h',2/s()@]'(`=2/
)B0V8*$$(B+<VdM+sS<X,UF``-RU;k.4Qhu/1`A*0/#"60etOA2)[BP2`NfY4$5Vg4[)(q5X@_(6UX=2
7Rp!?8P2TJ9MA/U:Jaka;,U=l<E3(#='/R->$>-8>[:ZC?XR8M@Uiq[AS,OeBP;*oC27U#Ci+'-Df9T6
EH6)?F)uGGF`hkOG^+IYH?spbH[L3hI=6QnIt*!!JUrE)K7ef0KS5&5L51P>LPUbBM2@(GMMd=NN/W^T
NK&pWNfK-[NfK0]O,o?`OH>QcOHGZfOcbcgP*1ukP*1ukP*;)nPEV2oPEV5qQ'IW"Q'IW"~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
403.788 48.6517 mo
403.428 48.7117 li
403.008 48.7717 li
402.048 49.0117 li
401.868 49.0717 li
401.748 49.1317 li
401.208 49.3117 li
400.128 49.8517 li
400.068 49.9117 li
399.948 49.9717 li
399.888 50.0317 li
399.648 50.1517 li
399.588 50.2117 li
399.468 50.2717 li
399.348 50.3917 li
399.228 50.4517 li
399.108 50.5717 li
398.988 50.6317 li
398.688 50.9317 li
398.568 50.9917 li
397.848 51.7117 li
397.788 51.8317 li
397.548 52.0717 li
397.488 52.1917 li
397.368 52.3117 li
397.308 52.4317 li
397.188 52.5517 li
397.128 52.6717 li
397.068 52.7317 li
397.008 52.8517 li
396.948 52.9117 li
396.828 53.1517 li
396.768 53.2117 li
396.648 53.4517 li
396.588 53.5117 li
396.528 53.6317 li
396.468 53.8117 li
396.228 54.2917 li
396.168 54.4717 li
396.108 54.5917 li
395.868 55.3117 li
395.688 56.0317 li
395.568 56.8717 li
395.508 57.8317 li
395.568 57.8917 li
395.568 58.9117 li
395.628 58.9117 li
395.628 59.2717 li
395.688 59.2717 li
395.688 59.6917 li
395.748 59.6917 li
395.748 59.9317 li
395.808 59.9317 li
395.808 60.1717 li
395.868 60.1717 li
395.868 60.4117 li
395.928 60.4117 li
395.928 60.6517 li
395.988 60.6517 li
395.988 60.8317 li
396.048 60.8317 li
396.048 60.9517 li
396.108 60.9517 li
396.108 61.1317 li
396.168 61.1317 li
396.168 61.3117 li
396.228 61.3117 li
396.228 61.4917 li
396.288 61.4917 li
396.288 61.6117 li
396.348 61.6117 li
396.348 61.7317 li
396.408 61.7317 li
396.408 61.8517 li
396.468 61.8517 li
396.468 61.9717 li
396.528 61.9717 li
396.528 62.0917 li
396.588 62.0917 li
396.588 62.2117 li
396.648 62.2117 li
396.648 62.3317 li
396.708 62.3317 li
396.708 62.4517 li
396.768 62.4517 li
396.828 62.5117 li
396.828 62.6317 li
396.888 62.6317 li
396.888 62.7517 li
396.948 62.7517 li
397.008 62.8117 li
397.008 62.9317 li
397.068 62.9317 li
397.068 63.0517 li
397.128 63.0517 li
397.248 63.1717 li
397.248 63.2917 li
397.308 63.2917 li
397.368 63.3517 li
397.368 63.4717 li
397.428 63.4717 li
397.548 63.5917 li
397.548 63.7117 li
397.608 63.7117 li
397.968 64.0717 li
397.968 64.1917 li
398.028 64.1917 li
398.508 64.6717 li
398.628 64.7317 li
398.988 65.0917 li
399.108 65.1517 li
399.228 65.2717 li
399.348 65.3317 li
399.408 65.3917 li
399.528 65.4517 li
399.648 65.5717 li
399.888 65.6917 li
399.948 65.7517 li
400.188 65.8717 li
400.248 65.9317 li
401.208 66.4117 li
401.748 66.5917 li
401.868 66.6517 li
402.048 66.7117 li
403.008 66.9517 li
403.428 67.0117 li
403.788 67.0717 li
405.828 67.1317 li
405.828 67.0717 li
406.668 66.9517 li
407.628 66.7117 li
407.748 66.6517 li
408.108 66.5317 li
408.228 66.4717 li
408.408 66.4117 li
408.648 66.2917 li
408.828 66.2317 li
409.308 65.9917 li
409.368 65.9317 li
409.608 65.8117 li
409.668 65.7517 li
409.908 65.6317 li
409.968 65.5717 li
410.088 65.5117 li
410.208 65.3917 li
410.328 65.3317 li
410.448 65.2117 li
410.568 65.1517 li
410.688 65.0317 li
410.808 64.9717 li
411.288 64.4917 li
411.408 64.4317 li
411.468 64.3117 li
411.948 63.8317 li
412.008 63.7117 li
412.128 63.5917 li
412.188 63.4717 li
412.308 63.3517 li
412.368 63.2317 li
412.488 63.1117 li
412.548 62.9917 li
412.608 62.9317 li
412.728 62.6917 li
412.788 62.6317 li
412.848 62.5117 li
412.908 62.4517 li
413.328 61.6117 li
413.388 61.4317 li
413.448 61.3117 li
413.628 60.7717 li
413.688 60.6517 li
413.928 59.6917 li
413.988 59.2717 li
414.048 58.9117 li
414.108 56.8717 li
414.048 56.8717 li
414.048 56.4517 li
413.988 56.4517 li
413.988 56.0917 li
413.928 56.0917 li
413.928 55.7917 li
413.868 55.7917 li
413.868 55.5517 li
413.808 55.5517 li
413.808 55.3717 li
413.748 55.3717 li
413.748 55.1317 li
413.688 55.1317 li
413.688 54.9517 li
413.628 54.9517 li
413.628 54.7717 li
413.568 54.7717 li
413.568 54.6517 li
413.508 54.6517 li
413.508 54.4717 li
413.448 54.4717 li
413.448 54.2917 li
413.388 54.2917 li
413.388 54.1717 li
413.328 54.1717 li
413.328 54.0517 li
413.268 54.0517 li
413.268 53.9317 li
413.208 53.9317 li
413.208 53.8117 li
413.148 53.8117 li
413.148 53.6917 li
413.088 53.6917 li
413.088 53.5717 li
413.028 53.5717 li
413.028 53.4517 li
412.968 53.4517 li
412.968 53.3317 li
412.908 53.2717 li
412.848 53.2717 li
412.848 53.1517 li
412.788 53.1517 li
412.788 53.0317 li
412.728 52.9717 li
412.668 52.9717 li
412.668 52.8517 li
412.608 52.8517 li
412.608 52.7317 li
412.488 52.6117 li
412.428 52.6117 li
412.428 52.4917 li
412.308 52.3717 li
412.248 52.3717 li
412.248 52.2517 li
412.128 52.1317 li
412.068 52.1317 li
412.068 52.0117 li
411.648 51.5917 li
411.588 51.5917 li
411.588 51.4717 li
411.288 51.1717 li
411.168 51.1117 li
410.748 50.6917 li
410.628 50.6317 li
410.508 50.5117 li
410.388 50.4517 li
410.328 50.3917 li
410.208 50.3317 li
410.088 50.2117 li
409.968 50.1517 li
409.908 50.0917 li
409.668 49.9717 li
409.608 49.9117 li
409.368 49.7917 li
409.308 49.7317 li
408.828 49.4917 li
408.648 49.4317 li
408.408 49.3117 li
408.228 49.2517 li
408.108 49.1917 li
407.748 49.0717 li
407.628 49.0117 li
406.668 48.7717 li
405.828 48.6517 li
eclp
395.448 67.1917 mo
414.168 67.1917 li
414.168 48.5317 li
395.448 48.5317 li
cp
/4 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[18.72 0 0 18.66 286.716 111.217 ]ct
snap_to_device
<<
/T 1
/W 312 
/H 1 
/M[312 0 0 -1 0 1 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE*!s8W-"9\i1"9er4"U5/8#6tJ=#RC\B#mgnF$O[@O%1NaU%Ls![&.fBb&J>]h',2/s()@]'(`=2/
)B0V8*$$(B+<VdM+sS<W,UF``-RU;k.4Qhu/1`A*/h\n50etL?1c70L2E*TU3]fDc4?Ykl5<qM$6:+%-
77Kd;84cBF91qrQ:/=Y]:f1+h;cHas<``@)=]np4>?kH??=$uH@:E_VA7]=aB4kmkBkhBtCM[j)D/O91
E,fl;EcQ5CFEDYKGB\7UH$O^^H@(!dI!g?jIXZcrJ:N3%JV&K+K7ef0Knb>:L51P>LkpkCM2@+IMi3LP
N/W^SNK&pWNK&sYNfK-\O,o?_O-#HbOH>QcOcbcgOcbcgOckljP*1ukP*2#mPa%DsPa%Ds~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
169.368 48.6517 mo
169.008 48.7117 li
168.588 48.7717 li
167.628 49.0117 li
167.448 49.0717 li
167.328 49.1317 li
166.788 49.3117 li
165.708 49.8517 li
165.648 49.9117 li
165.528 49.9717 li
165.468 50.0317 li
165.228 50.1517 li
165.168 50.2117 li
165.048 50.2717 li
164.928 50.3917 li
164.808 50.4517 li
164.688 50.5717 li
164.568 50.6317 li
164.268 50.9317 li
164.148 50.9917 li
163.428 51.7117 li
163.368 51.8317 li
163.128 52.0717 li
163.068 52.1917 li
162.948 52.3117 li
162.888 52.4317 li
162.768 52.5517 li
162.708 52.6717 li
162.648 52.7317 li
162.588 52.8517 li
162.528 52.9117 li
162.408 53.1517 li
162.348 53.2117 li
162.228 53.4517 li
162.168 53.5117 li
162.108 53.6317 li
162.048 53.8117 li
161.808 54.2917 li
161.748 54.4717 li
161.688 54.5917 li
161.448 55.3117 li
161.268 56.0317 li
161.148 56.8717 li
161.088 57.8317 li
161.148 57.8917 li
161.148 58.9117 li
161.208 58.9117 li
161.208 59.2717 li
161.268 59.2717 li
161.268 59.6917 li
161.328 59.6917 li
161.328 59.9317 li
161.388 59.9317 li
161.388 60.1717 li
161.448 60.1717 li
161.448 60.4117 li
161.508 60.4117 li
161.508 60.6517 li
161.568 60.6517 li
161.568 60.8317 li
161.628 60.8317 li
161.628 60.9517 li
161.688 60.9517 li
161.688 61.1317 li
161.748 61.1317 li
161.748 61.3117 li
161.808 61.3117 li
161.808 61.4917 li
161.868 61.4917 li
161.868 61.6117 li
161.928 61.6117 li
161.928 61.7317 li
161.988 61.7317 li
161.988 61.8517 li
162.048 61.8517 li
162.048 61.9717 li
162.108 61.9717 li
162.108 62.0917 li
162.168 62.0917 li
162.168 62.2117 li
162.228 62.2117 li
162.228 62.3317 li
162.288 62.3317 li
162.288 62.4517 li
162.348 62.4517 li
162.408 62.5117 li
162.408 62.6317 li
162.468 62.6317 li
162.468 62.7517 li
162.528 62.7517 li
162.588 62.8117 li
162.588 62.9317 li
162.648 62.9317 li
162.648 63.0517 li
162.708 63.0517 li
162.828 63.1717 li
162.828 63.2917 li
162.888 63.2917 li
162.948 63.3517 li
162.948 63.4717 li
163.008 63.4717 li
163.128 63.5917 li
163.128 63.7117 li
163.188 63.7117 li
163.548 64.0717 li
163.548 64.1917 li
163.608 64.1917 li
164.088 64.6717 li
164.208 64.7317 li
164.568 65.0917 li
164.688 65.1517 li
164.808 65.2717 li
164.928 65.3317 li
164.988 65.3917 li
165.108 65.4517 li
165.228 65.5717 li
165.468 65.6917 li
165.528 65.7517 li
165.768 65.8717 li
165.828 65.9317 li
166.788 66.4117 li
167.328 66.5917 li
167.448 66.6517 li
167.628 66.7117 li
168.588 66.9517 li
169.008 67.0117 li
169.368 67.0717 li
171.468 67.1317 li
171.468 67.0717 li
171.828 67.0117 li
172.248 66.9517 li
173.208 66.7117 li
173.388 66.6517 li
173.508 66.5917 li
174.048 66.4117 li
175.008 65.9317 li
175.068 65.8717 li
175.308 65.7517 li
175.368 65.6917 li
175.608 65.5717 li
175.728 65.4517 li
175.848 65.3917 li
175.908 65.3317 li
176.028 65.2717 li
176.148 65.1517 li
176.268 65.0917 li
176.628 64.7317 li
176.748 64.6717 li
177.228 64.1917 li
177.288 64.0717 li
177.648 63.7117 li
177.708 63.5917 li
177.828 63.4717 li
177.888 63.3517 li
177.948 63.2917 li
178.008 63.1717 li
178.128 63.0517 li
178.248 62.8117 li
178.308 62.7517 li
178.428 62.5117 li
178.488 62.4517 li
178.968 61.4917 li
179.148 60.9517 li
179.208 60.8317 li
179.268 60.6517 li
179.508 59.6917 li
179.568 59.2717 li
179.628 58.9117 li
179.688 56.8717 li
179.628 56.8717 li
179.628 56.4517 li
179.568 56.4517 li
179.568 56.0317 li
179.508 56.0317 li
179.508 55.7917 li
179.448 55.7917 li
179.448 55.5517 li
179.388 55.5517 li
179.388 55.3117 li
179.328 55.3117 li
179.328 55.1317 li
179.268 55.1317 li
179.268 54.9517 li
179.208 54.9517 li
179.208 54.7717 li
179.148 54.7717 li
179.148 54.5917 li
179.088 54.5917 li
179.088 54.4717 li
179.028 54.4717 li
179.028 54.2917 li
178.968 54.2917 li
178.968 54.1717 li
178.908 54.1717 li
178.908 54.0517 li
178.848 54.0517 li
178.848 53.9317 li
178.788 53.9317 li
178.788 53.8117 li
178.728 53.8117 li
178.728 53.6317 li
178.668 53.6317 li
178.668 53.5117 li
178.608 53.4517 li
178.548 53.4517 li
178.548 53.3317 li
178.488 53.3317 li
178.488 53.2117 li
178.428 53.1517 li
178.368 53.1517 li
178.368 53.0317 li
178.308 53.0317 li
178.308 52.9117 li
178.248 52.8517 li
178.188 52.8517 li
178.188 52.7317 li
178.128 52.6717 li
178.068 52.6717 li
178.068 52.5517 li
177.948 52.4317 li
177.888 52.4317 li
177.888 52.3117 li
177.768 52.1917 li
177.708 52.1917 li
177.708 52.0717 li
177.468 51.8317 li
177.408 51.8317 li
177.408 51.7117 li
176.688 50.9917 li
176.568 50.9317 li
176.268 50.6317 li
176.148 50.5717 li
176.028 50.4517 li
175.908 50.3917 li
175.788 50.2717 li
175.668 50.2117 li
175.608 50.1517 li
175.368 50.0317 li
175.308 49.9717 li
175.188 49.9117 li
175.128 49.8517 li
174.048 49.3117 li
173.508 49.1317 li
173.388 49.0717 li
173.208 49.0117 li
172.248 48.7717 li
171.828 48.7117 li
171.468 48.6517 li
eclp
161.028 67.1917 mo
179.748 67.1917 li
179.748 48.5317 li
161.028 48.5317 li
cp
/5 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 108.732 178.409 ]ct
[18.72 0 0 18.66 52.2964 111.217 ]ct
snap_to_device
<<
/T 1
/W 312 
/H 1 
/M[312 0 0 -1 0 1 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!s8W-"9\i1"9er4"U5/8#6tJ=#RC\A#mgnF$4@7N%1NaU%Ls![%hK9a&J5Wg',2/s(Ddo+)&X>2
)]Th;*?H:F+<_mP,:"N[,pjrd-R^Dn.P!##/M/S-0/,+91,:XB2)[BP2`NfY3]fGe4[)%o5X@_(6UO71
7Ros>8P2TI92&&T:JXe`;,U=k<)lt"='&L,>$>*6>[:ZC?XI2L@UinYAS,OeB4u!nC2.O"Ci+'-DJsK5
EH-#>F)uDEF`hkOGBe@XH?smaH[L3hI=6QnIt)ruJUrE)JqJ]/KS5#4L51P>LPUbBLl$tFMMd:LN/W^T
NK&pWNfK-[NfK0]O,o?`OH>QcOHGZfOcbcgP*1ukP*1ukP*;)nPEV2oPEV2pQ'IW"Q'IW"~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
423.648 59.5717 mo
429.408 59.5717 li
429.948 59.5717 430.368 59.9917 430.368 60.4717 cv
430.368 118.012 li
428.508 118.012 li
428.508 60.4717 li
429.408 61.4317 li
423.648 61.4317 li
0 0 0 rgb
f
429.408 102.052 mo
429.348 102.052 li
428.868 102.052 428.448 102.412 428.448 102.952 cv
428.448 156.232 li
429.348 155.272 li
280.788 155.272 li
280.788 157.132 li
429.348 157.132 li
429.888 157.132 430.308 156.712 430.308 156.232 cv
430.308 102.952 li
429.348 103.852 li
429.408 103.852 li
f
152.028 59.5717 mo
142.488 59.5717 li
141.948 59.5717 141.528 59.9917 141.528 60.4717 cv
141.528 122.452 li
143.388 122.452 li
143.388 60.4717 li
142.488 61.4317 li
152.028 61.4317 li
f
142.488 110.752 mo
142.548 110.752 li
143.028 110.752 143.448 111.172 143.448 111.712 cv
143.448 156.232 li
142.548 155.272 li
272.868 155.272 li
272.868 157.132 li
142.548 157.132 li
142.008 157.132 141.588 156.712 141.588 156.232 cv
141.588 111.712 li
142.548 112.612 li
142.488 112.612 li
f
271.908 166.312 mo
273.768 166.312 li
273.768 147.772 li
271.908 147.772 li
cp
f
279.828 177.472 mo
281.688 177.472 li
281.688 136.912 li
279.828 136.912 li
cp
f
39.9482 74.5717 mo
41.8082 74.5717 li
41.8082 27.0517 li
39.9482 27.0517 li
cp
41.8082 74.5717 mo
cp
44.9282 32.1517 mo
40.9082 25.1917 li
36.8282 32.1517 li
36.5882 32.5717 36.7082 33.1717 37.1282 33.4117 cv
37.6082 33.6517 38.1482 33.5317 38.4482 33.1117 cv
41.6882 27.5317 li
40.0682 27.5317 li
43.3082 33.1117 li
43.6082 33.5317 44.1482 33.6517 44.6282 33.4117 cv
45.0482 33.1717 45.2282 32.5717 44.9282 32.1517 cv
f
40.9082 73.6117 mo
122.328 73.6117 li
122.328 75.4717 li
40.9082 75.4717 li
cp
117.228 70.4917 mo
124.188 74.5717 li
117.228 78.5917 li
116.748 78.8917 116.208 78.7117 115.968 78.2917 cv
115.668 77.8117 115.848 77.2717 116.268 77.0317 cv
121.848 73.7317 li
121.848 75.3517 li
116.268 72.1117 li
115.848 71.8717 115.668 71.2717 115.968 70.8517 cv
116.208 70.4317 116.748 70.2517 117.228 70.4917 cv
f
40.1882 73.9117 mo
4.24818 113.452 li
5.62817 114.652 li
41.5682 75.1717 li
cp
5.32818 107.572 mo
3.64818 115.432 li
11.3282 112.972 li
11.8682 112.852 12.1082 112.312 11.9882 111.832 cv
11.8082 111.352 11.2682 111.052 10.7882 111.232 cv
4.60818 113.152 li
5.80817 114.232 li
7.18818 107.932 li
7.24818 107.452 6.94817 106.912 6.46818 106.852 cv
5.92818 106.732 5.44817 107.032 5.32818 107.572 cv
f
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: MZQAAA+ComicSansMS-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
LBCVCO+ComicSansMS-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B7CDD8CD1F6FBE55CB7866CB68F9C23AAC26B148955A77771F
74CCF2CC8B8D58EAC8A2502B1E7EC1941157B9820277D49E4C4FDAAA59DDAA99
B52CDD3E1D0BC7C01222554C2FE928269DAEF1985143E87F19D4DC749822E1D9
6F42D5AF98550058021E98CBF9464D7DDA1A67F0F1AC29813066755F33664D16
0FB2FEAD5A20F91368AE8EEB691D64DDB9F6E1404ED4C1124ACDA5846B95D758
D8AA1B547DEB7E55FC1908E7FD9836F37F6ED357BAB502BA1EAD797B4AE07867
3967DE85CCDA58C707D49EA58A04033B1C61> |-
/y <1C60D8A8C9B7924C43A513466A5B2D1913602993D74C55DC1942122CF91E
DEB1484C3B82E85583087500831F71AED564EA66AA19E5DB30712BB22F7BAC36
197FE6B5CAC4F5F11E3F862FBD7D3E5EAFF20B21367A61F9FC33ABC26EE2A8F5
B48F1FDA19092A43741962816DB98BD7EA4E8B64CD13BC51C14212F7A9CAAFF8
55F4E5458AF85E19153222B0CD3D346446F57B69F96D481DC46373D037FE9AB4
656A> |-
/z <1C60D8A8C9B78181CF779F1316C827896E2945E4456B885A372DF6E6FBBD
DEE958A2D92BC5BF401C79DD88DD20AAED904D7C38898B9480BD04054563D898
30B86BE11ED7142F2C672465995C2278E67031D1A5EE86E1D8C196FA3DB36FCF
4A52C28283465DDC44DF98DCD708278F4A1FE390898CD576CAD55CFEE83C5B4E
F8B9A9B1862CC983B099D5B8779F30C70687BE8A537BDB2ADFC9B134DF53AC95
A8AD2D978182BDEBDBFA7B591EBDB6DA2E505C289142DB569A7C9F37811EF20E
1133E434F6A2D0479B4F2A65D10FA8622FE811F0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBCVCO+ComicSansMS-Bold /Encoding get
dup 120 /x put
dup 121 /y put
dup 122 /z put
pop
%ADOEndSubsetFont
/LBCVCO+ComicSansMS-Bold*1 
[68{/.notdef}rp /D 17{/.notdef}rp /V 33{/.notdef}rp /x /y /z 
133{/.notdef}rp]
LBCVCO+ComicSansMS-Bold nf
LBCVCO+ComicSansMS-Bold*1 [17.3756 0 0 -17.3365 0 0 ]msf
35.0282 21.6517 mo
(z)sh
126.949 80.6322 mo
(y)sh
.709633 126.293 mo
(x)sh
41.6882 75.2317 mo
78.8282 41.9917 li
77.6282 40.6117 li
40.4282 73.8517 li
cp
77.1482 47.6917 mo
79.6082 40.0717 li
71.7482 41.6917 li
71.2082 41.7517 70.9082 42.2917 70.9682 42.7717 cv
71.0882 43.2517 71.5682 43.6117 72.1082 43.4917 cv
78.4082 42.1717 li
77.3282 40.9717 li
75.3482 47.1517 li
75.2282 47.6317 75.4682 48.1717 75.9482 48.2917 cv
76.4282 48.4717 76.9682 48.1717 77.1482 47.6917 cv
0 0 0 rgb
f
.136538 .123054 .126659 rgb
%ADOBeginSubsetFont: ELRBAA+Cambria-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (ELRBAA+Cambria)
%%Title: (ELRBAA+Cambria Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /ELRBAA+Cambria def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2463 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 6991 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
2200 <001C60D8A8C9B78256D2056E5D5F9B0BF9990270816179CD5009627AA4
0563EF051A6A7050EBDC14F475E3AB3516C8C543EF8C07E10039ABF01D6411AE
17BEF2FFD97FF97BF2C5EFF1201831CC77FC93B4FEB4A5972377853448CCDEB8
1C9F176F4C38983D6F04AE045073A369ED1E73C7DEB4ECE8ADE46A55F750ADA3
E0AE83CBB7CE9FD304DAE070C3C5865201197EAAD6F266CEFD1648DCC7875B96
DA999EA1D11A2AA8DA300287> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /ELRBAA+Cambria-Identity-H /Identity-H 0 [/ELRBAA+Cambria] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LBCVCP+Cambria /ELRBAA+Cambria-Identity-H findfont ct_VMDictPut
LBCVCP+Cambria [17.3756 0 0 -17.3365 0 0 ]msf
83.2082 41.5717 mo
(\010\230)sh
90.3482 27.6517 mo
92.5082 29.4517 li
92.5082 29.9317 li
90.3482 31.7917 li
89.9282 31.3117 li
91.3082 30.1117 li
83.2082 30.1117 li
83.2082 29.3317 li
91.3082 29.3317 li
89.9282 28.1317 li
0 0 0 rgb
f
79.3082 40.0717 mo
81.1682 40.0717 li
81.1682 41.9317 li
79.3082 41.9317 li
cp
81.1682 40.0717 mo
cp
79.3082 43.7917 mo
81.1682 43.7917 li
81.1682 45.6517 li
79.3082 45.6517 li
cp
81.1682 43.7917 mo
cp
79.3082 47.5117 mo
81.1682 47.5117 li
81.1682 49.3717 li
79.3082 49.3717 li
cp
81.1682 47.5117 mo
cp
79.3082 51.1717 mo
81.1682 51.1717 li
81.1682 53.0317 li
79.3082 53.0317 li
cp
81.1682 51.1717 mo
cp
79.3082 54.8917 mo
81.1682 54.8917 li
81.1682 56.7517 li
79.3082 56.7517 li
cp
81.1682 54.8917 mo
cp
79.3082 58.6117 mo
81.1682 58.6117 li
81.1682 60.4717 li
79.3082 60.4717 li
cp
81.1682 58.6117 mo
cp
79.3082 62.3317 mo
81.1682 62.3317 li
81.1682 64.1917 li
79.3082 64.1917 li
cp
81.1682 62.3317 mo
cp
79.3082 66.0517 mo
81.1682 66.0517 li
81.1682 67.9117 li
79.3082 67.9117 li
cp
81.1682 66.0517 mo
cp
79.3082 69.7717 mo
81.1682 69.7717 li
81.1682 71.6317 li
79.3082 71.6317 li
cp
81.1682 69.7717 mo
cp
79.3082 73.4917 mo
81.1682 73.4917 li
81.1682 75.3517 li
79.3082 75.3517 li
cp
81.1682 73.4917 mo
cp
79.3082 77.2117 mo
81.1682 77.2117 li
81.1682 79.0717 li
79.3082 79.0717 li
cp
81.1682 77.2117 mo
cp
79.3082 80.9317 mo
81.1682 80.9317 li
81.1682 82.7317 li
79.3082 82.7317 li
cp
81.1682 80.9317 mo
cp
79.3082 84.5917 mo
81.1682 84.5917 li
81.1682 86.4517 li
79.3082 86.4517 li
cp
81.1682 84.5917 mo
cp
79.3082 88.3117 mo
81.1682 88.3117 li
81.1682 90.1717 li
79.3082 90.1717 li
cp
81.1682 88.3117 mo
cp
79.3082 92.0317 mo
81.1682 92.0317 li
81.1682 93.8917 li
79.3082 93.8917 li
cp
81.1682 92.0317 mo
cp
79.3082 95.7517 mo
81.1682 95.7517 li
81.1682 97.6117 li
79.3082 97.6117 li
cp
81.1682 95.7517 mo
cp
79.3082 99.4717 mo
81.1682 99.4717 li
81.1682 101.332 li
79.3082 101.332 li
cp
81.1682 99.4717 mo
cp
79.3082 103.192 mo
81.1682 103.192 li
81.1682 105.052 li
79.3082 105.052 li
cp
f
41.6282 73.8517 mo
43.0682 74.9917 li
41.9282 76.4317 li
40.4882 75.2917 li
cp
44.5682 76.1317 mo
46.0082 77.2717 li
44.8682 78.7117 li
43.4282 77.5717 li
cp
47.4482 78.4117 mo
48.9482 79.5517 li
47.8082 81.0517 li
46.3082 79.9117 li
cp
50.3882 80.7517 mo
51.8282 81.8917 li
50.6882 83.3317 li
49.2482 82.1917 li
cp
53.3282 83.0317 mo
54.7682 84.1717 li
53.6282 85.6117 li
52.1882 84.4717 li
cp
56.2682 85.3117 mo
57.7082 86.4517 li
56.5682 87.9517 li
55.0682 86.8117 li
cp
59.1482 87.6517 mo
60.6482 88.7917 li
59.4482 90.2317 li
58.0082 89.0917 li
cp
62.0882 89.9317 mo
63.5282 91.0717 li
62.3882 92.5117 li
60.9482 91.3717 li
cp
65.0282 92.2117 mo
66.4682 93.3517 li
65.3282 94.8517 li
63.8282 93.6517 li
cp
67.9082 94.4917 mo
69.4082 95.6917 li
68.2682 97.1317 li
66.7682 95.9917 li
cp
70.8482 96.8317 mo
72.2882 97.9717 li
71.1482 99.4117 li
69.7082 98.2717 li
cp
73.7882 99.1117 mo
75.2282 100.252 li
74.0882 101.692 li
72.6482 100.552 li
cp
76.6682 101.392 mo
78.1682 102.532 li
77.0282 104.032 li
75.5282 102.892 li
cp
79.6082 103.732 mo
80.8082 104.632 li
79.6682 106.132 li
78.4682 105.172 li
f
14.8682 104.032 mo
16.7282 104.032 li
16.6682 105.892 li
14.8082 105.892 li
cp
18.5882 104.032 mo
20.4482 104.032 li
20.3882 105.892 li
18.5282 105.892 li
cp
22.3082 104.092 mo
24.1682 104.092 li
24.1082 105.952 li
22.2482 105.892 li
cp
26.0282 104.092 mo
27.8882 104.092 li
27.8282 105.952 li
25.9682 105.952 li
cp
29.7482 104.092 mo
31.6082 104.092 li
31.5482 105.952 li
29.6882 105.952 li
cp
33.4682 104.152 mo
35.3282 104.152 li
35.2682 106.012 li
33.4082 106.012 li
cp
37.1882 104.152 mo
39.0482 104.152 li
38.9882 106.012 li
37.1282 106.012 li
cp
40.9082 104.152 mo
42.7682 104.212 li
42.7082 106.012 li
40.8482 106.012 li
cp
44.6282 104.212 mo
46.4882 104.212 li
46.4282 106.072 li
44.5682 106.072 li
cp
48.3482 104.212 mo
50.2082 104.212 li
50.1482 106.072 li
48.2882 106.072 li
cp
52.0682 104.212 mo
53.9282 104.272 li
53.8682 106.132 li
52.0082 106.072 li
cp
55.7882 104.272 mo
57.6482 104.272 li
57.6482 106.132 li
55.7882 106.132 li
cp
59.5082 104.272 mo
61.3682 104.272 li
61.3682 106.132 li
59.5082 106.132 li
cp
63.2282 104.272 mo
65.0882 104.332 li
65.0882 106.192 li
63.2282 106.132 li
cp
66.9482 104.332 mo
68.8082 104.332 li
68.8082 106.192 li
66.9482 106.192 li
cp
70.6682 104.332 mo
72.5282 104.332 li
72.5282 106.192 li
70.6682 106.192 li
cp
74.3882 104.392 mo
76.2482 104.392 li
76.2482 106.252 li
74.3882 106.252 li
cp
78.1082 104.392 mo
79.9682 104.392 li
79.9682 106.252 li
78.1082 106.252 li
cp
f
83.6282 105.052 mo
84.8282 103.672 li
83.4482 102.472 li
82.1882 103.852 li
cp
86.0282 102.232 mo
87.2882 100.852 li
85.8482 99.6517 li
84.6482 101.032 li
cp
88.4882 99.4117 mo
89.6882 98.0317 li
88.2482 96.8317 li
87.0482 98.2117 li
cp
90.8882 96.5917 mo
92.0882 95.2117 li
90.7082 94.0117 li
89.5082 95.3917 li
cp
93.2882 93.7717 mo
94.5482 92.3917 li
93.1082 91.1917 li
91.9082 92.5717 li
cp
95.7482 91.0117 mo
96.9482 89.5717 li
95.5682 88.3717 li
94.3082 89.7517 li
cp
98.1482 88.1917 mo
99.3482 86.7517 li
97.9682 85.5517 li
96.7682 86.9317 li
cp
100.608 85.3717 mo
101.808 83.9317 li
100.368 82.7317 li
99.1682 84.1117 li
cp
103.008 82.5517 mo
104.208 81.1117 li
102.828 79.9117 li
101.628 81.2917 li
cp
105.408 79.7317 mo
106.668 78.2917 li
105.228 77.0917 li
104.028 78.5317 li
cp
107.868 76.9117 mo
108.528 76.0717 li
107.148 74.8717 li
106.428 75.7117 li
f
40.8482 52.6117 mo
43.9682 52.6718 li
47.0282 52.7917 li
50.0282 53.0317 li
51.4682 53.1517 li
52.9082 53.3317 li
55.6682 53.6917 li
56.9882 53.9317 li
59.5082 54.4117 li
60.7082 54.6517 li
61.1282 54.7717 li
60.7082 56.5717 li
60.2882 56.4517 li
59.1482 56.2117 li
57.9482 55.9717 li
56.6882 55.7317 li
55.3682 55.5517 li
54.0482 55.3117 li
52.6682 55.1317 li
51.2882 55.0117 li
48.4082 54.7717 li
46.9082 54.6517 li
43.9082 54.5317 li
40.8482 54.4717 li
cp
57.0482 50.4517 mo
62.6882 56.1517 li
54.9482 58.2517 li
54.4082 58.3717 53.9282 58.0717 53.8082 57.5917 cv
53.6282 57.1117 53.9282 56.5717 54.4682 56.4517 cv
60.6482 54.7717 li
60.2282 56.3317 li
55.7282 51.7117 li
55.3682 51.3517 55.3682 50.8117 55.7282 50.4517 cv
56.0882 50.0917 56.6882 50.0917 57.0482 50.4517 cv
0 .4392 .7529 rgb
f
53.1482 86.1517 mo
52.3082 86.3317 li
50.9282 86.6317 li
47.9282 87.1117 li
46.3682 87.3517 li
44.7482 87.5317 li
43.0682 87.7117 li
39.7082 87.9517 li
37.9682 88.0717 li
36.2282 88.1317 li
30.8882 88.1317 li
29.0882 88.0717 li
29.1482 86.2117 li
30.9482 86.2717 li
36.1682 86.2717 li
37.9082 86.2117 li
41.2682 85.9717 li
42.8882 85.8517 li
44.5082 85.6717 li
47.6282 85.3117 li
49.1282 85.0717 li
50.5082 84.8317 li
51.8882 84.5317 li
52.7282 84.3517 li
cp
46.9682 82.5517 mo
54.7082 84.7717 li
49.0082 90.4117 li
48.6482 90.7717 48.0482 90.7717 47.6882 90.4117 cv
47.3282 90.0517 47.3282 89.4517 47.6882 89.0917 cv
52.3082 84.5917 li
52.6682 86.1517 li
46.4882 84.3517 li
46.0082 84.2317 45.7082 83.6917 45.8282 83.2117 cv
45.9482 82.7317 46.4882 82.4317 46.9682 82.5517 cv
.7529 0 0 rgb
f
0 .438 .754 rgb
%ADOBeginSubsetFont: AXNBAA+ComicSansMS-Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (AXNBAA+ComicSansMS-Bold)
%%Title: (AXNBAA+ComicSansMS-Bold Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /AXNBAA+ComicSansMS-Bold def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-112 -303 1229 1102} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 587 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB47F32422EDAB3B2C
7C2F968214656> |
452 <001C60D8A8C9B7D98F6DC991139A63D9A4B72AC071FA26F5555A2B8DD3B
DDE222811145E0D8415924394DBBEE3CA55E964BDEC33D75797180E350B10291
6E00BAF4C598B47F8BB11EAE6923B4115335AF7FAA3DB34346A7E8367DE2E1EA
E871EA9FB59E5D58E3B55FF434830244AD01F024FCC183F7CF3A46E5C60A8E73
DB9857D62973CAAB1C8147F179C3289340E3E0C76F8E7927296> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /AXNBAA+ComicSansMS-Bold-Identity-H /Identity-H 0 [/AXNBAA+ComicSansMS-Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LBCVCQ+ComicSansMS-Bold /AXNBAA+ComicSansMS-Bold-Identity-H findfont ct_VMDictPut
LBCVCQ+ComicSansMS-Bold [17.3756 0 0 -17.3365 0 0 ]msf
49.3682 47.3317 mo
(\001\304)sh
.754 0 0 rgb
%ADOBeginSubsetFont: AXNBAA+ComicSansMS-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/AXNBAA+ComicSansMS-Bold 1 GetGlyphDirectory
313 <001C60D8A8C9B675483FB8046B59B7EFF2E5A0191BA9558B88AFD0D258E
2DBD454D8B987479D94E38A921570575A326F508139D1E76DC5D9D3928BC512B
710C69C1E8B8896A81B559C4DEB2A8E8FED66C6968D6D57C817FCA1C57135CD6
E6236F5AA0F498F8DDF2E4EEBC098775499ACBFC650FA8D10E58DDFF616613AE
74A6C5364CE3B57912C059277D9CFF076BAE76B0EAAE35AF7B40EC8023480768
DB080130B32C9A7EA68FBAD021FFD457A9D70A91E548B6D3F815C39E138A07F7
8183A85BFF5DD2A626E1F8F1397C501F65902AA1E85250E6D1F668B> |
!
end
end end
%ADOEndSubsetFont
LBCVCQ+ComicSansMS-Bold [17.3756 0 0 -17.3365 0 0 ]msf
33.7684 98.4519 mo
(\0019)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 /3 /4 /5 /6 /7 ]]
] del_res
/LBCVCQ+ComicSansMS-Bold-Identity-H uf
/LBCVCQ+ComicSansMS-Bold /CIDFont ur
/LBCVCP+Cambria-Identity-H uf
/LBCVCP+Cambria /CIDFont ur
/LBCVCO+ComicSansMS-Bold*1 uf
/LBCVCO+ComicSansMS-Bold uf
/MZQAAA+ComicSansMS-Bold uf
/LBCVCN+SymbolMT-Identity-H uf
/LBCVCN+SymbolMT /CIDFont ur
/LBCVCL+Calibri-BoldItalic*1 uf
/LBCVCL+Calibri-BoldItalic uf
/GFNBAA+Calibri-BoldItalic uf
/LBCVCM+Calibri-BoldItalic-Identity-H uf
/LBCVCM+Calibri-BoldItalic /CIDFont ur
/LBCVCK+TimesNewRomanPS-ItalicMT-Identity-H uf
/LBCVCK+TimesNewRomanPS-ItalicMT /CIDFont ur
/LBCVCJ+TimesNewRomanPS-ItalicMT*1 uf
/LBCVCJ+TimesNewRomanPS-ItalicMT uf
/HIBBAA+TimesNewRomanPS-ItalicMT uf
/LBCVCI+TimesNewRomanPSMT*1 uf
/LBCVCI+TimesNewRomanPSMT uf
/PBAAAA+TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
